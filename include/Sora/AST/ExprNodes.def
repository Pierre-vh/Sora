//===--- ExprNodes.def - Expression ASTs x-macros ---------------*- C++ -*-===//
// Part of the Sora project, licensed under the MIT license.
// See LICENSE.txt in the project root for license information.
//
// Copyright (c) 2019 Pierre van Houtryve
//===----------------------------------------------------------------------===//

#ifndef EXPR
# define EXPR(KIND, PARENT)
#endif

#ifndef ABSTRACT_EXPR
# define ABSTRACT_EXPR(KIND, PARENT)
#endif

#ifndef EXPR_RANGE
# define EXPR_RANGE(NAME, FIRST, LAST)
#endif

#ifndef LAST_EXPR
# define LAST_EXPR(KIND)
#endif

//===----------------------------------------------------------------------===//

ABSTRACT_EXPR(Unresolved, Expr)
	EXPR(UnresolvedDeclRef, UnresolvedExpr)
	EXPR(UnresolvedMemberRef, UnresolvedExpr)
	EXPR_RANGE(Unresolved, UnresolvedDeclRef, UnresolvedMemberRef)
// (TBA: For Sema)
//EXPR(ConstructorDeclRef, Expr)
//EXPR(DeclRef, Expr)
EXPR(Discard, Expr)
ABSTRACT_EXPR(AnyLiteral, Expr)
  EXPR(IntegerLiteral, AnyLiteralExpr)
  EXPR(FloatLiteral, AnyLiteralExpr)
	EXPR(BooleanLiteral, AnyLiteralExpr)
	EXPR(NullLiteral, AnyLiteralExpr)
	EXPR_RANGE(AnyLiteral, IntegerLiteral, NullLiteral)
EXPR(Error, Expr)
EXPR(Cast, Expr)
EXPR(TupleElement, Expr)
EXPR(Tuple, Expr)
EXPR(Paren, Expr)
EXPR(Call, Expr)
EXPR(Conditional, Expr)
EXPR(ForceUnwrap, Expr)
EXPR(Binary, Expr)
EXPR(Unary, Expr)

LAST_EXPR(Unary)

//===----------------------------------------------------------------------===//

#undef EXPR
#undef ABSTRACT_EXPR
#undef EXPR_RANGE
#undef LAST_EXPR