//===--- DiagnosticsParser.def - Parser Diagnostic x-macros -----*- C++ -*-===//
// Part of the Sora project, licensed under the MIT license.
// See LICENSE.txt in the project root for license information.
//
// Copyright (c) 2019 Pierre van Houtryve
//===----------------------------------------------------------------------===//

#if !(defined(DIAG) || defined(SORA_FWD_DECL)\
  || (defined(REMARK) && defined(NOTE) && defined(WARNING) && defined(ERROR)))
# error "Must define DIAG, SORA_FWD_DECL or {REMARK, NOTE, WARNING, ERROR}"
#endif

#ifndef DIAG
# define DIAG(KIND, ID, TEXT, SIGNATURE)
#endif

#ifndef REMARK
# define REMARK(ID, TEXT, SIGNATURE) DIAG(Remark, ID, TEXT, SIGNATURE)
#endif

#ifndef NOTE
# define NOTE(ID, TEXT, SIGNATURE) DIAG(Note, ID, TEXT, SIGNATURE)
#endif

#ifndef WARNING
# define WARNING(ID, TEXT, SIGNATURE) DIAG(Warning, ID, TEXT, SIGNATURE)
#endif

#ifndef ERROR
# define ERROR(ID, TEXT, SIGNATURE) DIAG(Error, ID, TEXT, SIGNATURE)
#endif

#ifndef SORA_FWD_DECL
# define SORA_FWD_DECL(X)
#endif

//===----------------------------------------------------------------------===//

//===- 'Expected' Diagnostics ---------------------------------------------===//

// Punctuators
ERROR(expected_lparen_in_fn_arg_list, 
  "expected '(' in function declaration parameter list", ())
ERROR(expected_lcurly_fn_body, 
  "expected '{' in body of function declaration", ())

ERROR(expected_colon,   "expected ':'", ())

ERROR(expected_rparen,  "expected ')'", ())
ERROR(expected_rcurly,  "expected '}'", ())
ERROR(expected_rsquare, "expected ']'", ())

ERROR(expected_lcurly_after_cond, 
  "expected '{' after '%0' condition", (StringRef))
ERROR(expected_lcurly_or_if_after_else, 
  "expected '{' or 'if' after 'else'", ())

ERROR(expected_rparen_at_end_of_tuple_type, 
  "expected ')' at end of tuple type", ())

ERROR(unexpected_sep, "unexpected '%0' separator", (StringRef))

NOTE(to_match_lparen,   "to match this opening '('", ())
NOTE(to_match_lcurly,   "to match this opening '{'", ())
NOTE(to_match_lsquare,  "to match this opening '['", ())

// Types
ERROR(expected_type,      "expected a type", ())
ERROR(expected_fn_ret_ty, "expected function return type", ())
ERROR(expected_type_after, "expected a type after '%0'", (StringRef))

// Identifiers
ERROR(expected_ident_in_fn,
  "expected identifier in function declaration", ())

// Declarations
ERROR(expected_fn_decl,
  "expected a function declaration", ())
ERROR(expected_param_decl,
  "expected a parameter declaration", ())
ERROR(let_not_allowed_at_global_level,
  "'let' declarations are not allowed at the global level", ())
ERROR(no_newline_after_decl,
  "no newline after declaration", ())
ERROR(expected_rparen_at_end_of_param_list, 
  "expected ')' at end of parameter list", ())
ERROR(param_requires_explicit_type, 
  "parameter requires an explicit type", ())

// Expressions
ERROR(expected_expr,
  "expected an expression", ())
ERROR(expected_initial_value_after_equal,
  "expected initial value after '='", ()) 
ERROR(expected_expr_after,
  "expected an expression after '%0'", (StringRef))
ERROR(expected_expr_after_in_ternary,
  "expected an expression after '%0' in ternary expression", (StringRef))
ERROR(expected_member_name_or_index_after,
  "expected a member name or an index after '%0'", (StringRef))
ERROR(expected_rparen_at_end_of_tuple_expr, 
  "expected ')' at end of tuple expression", ())
ERROR(binary_op_at_start_of_line,
  "operator '%0' cannot appear at the start of a line", (StringRef))
ERROR(expected_expr_return, 
  "expected an expression in 'return' statement", ())

WARNING(unindented_expr_after_ret,
  "expression following 'return' is treated as an argument of the 'return'", ())
NOTE(indent_expr_to_silence,
  "indent the expression to silence this warning", ())

// Patterns
ERROR(expected_pat_after,
  "expected a pattern after '%0'", (StringRef))
ERROR(expected_rparen_at_end_of_tuple_pat,
  "expected ')' at end of tuple pattern", ())
ERROR(pat_can_only_have_one_mut,
  "pattern can only have one 'mut' specifier", ())
ERROR(useless_mut_spec__already_mut,
  "unnecessary 'mut' specifier - pattern is already mutable", ())
NOTE(pat_made_mutable_by_this_mut,
  "pattern was made mutable by this 'mut'", ())

// Statements
ERROR(expected_block_item,
  "expected a statement, an expression or a declaration", ())
ERROR(expected_newline,
  "expected a newline", ())
ERROR(expected_cond_in,
  "expected an expression or 'let' in '%0' condition", (StringRef))

//===----------------------------------------------------------------------===//

#ifndef KEEP_DIAG_MACROS
# undef DIAG
# undef REMARK
# undef NOTE
# undef WARNING
# undef ERROR
# undef SORA_FWD_DECL
#endif