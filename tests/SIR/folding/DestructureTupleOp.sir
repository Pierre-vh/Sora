// NOTE: CHECK lines have been generated by utils/update_filecheck_test.py
// RUN: sir-opt %s -pass-pipeline='func(canonicalize)' | FileCheck %s

// This tests that something like "sir.destructure_tuple(sir.create_tuple(args...))" is
// correctly folded into just "args...".

func @foo() {
  %c0 = constant 0 : i32
  %c1 = constant 1 : i32
  %c2 = constant 2 : i32
  %c3 = constant 3 : i32

  %tuple0 = sir.create_tuple(%c0, %c1, %c2, %c3 : i32, i32, i32, i32) -> tuple<i32, i32, i32, i32>
  %destr0:4 = sir.destructure_tuple %tuple0 : (tuple<i32, i32, i32, i32>) -> (i32, i32, i32, i32)

  %mem = sir.alloc_stack : !sir.pointer<i32>

  sir.store %destr0#0 : i32 into %mem : !sir.pointer<i32>
  sir.store %destr0#1 : i32 into %mem : !sir.pointer<i32>
  sir.store %destr0#2 : i32 into %mem : !sir.pointer<i32>
  sir.store %destr0#3 : i32 into %mem : !sir.pointer<i32>

  return
}

// CHECK:      module {
// CHECK-NEXT:   func @foo() {
// CHECK-NEXT:     %c0_i32 = constant 0 : i32
// CHECK-NEXT:     %c1_i32 = constant 1 : i32
// CHECK-NEXT:     %c2_i32 = constant 2 : i32
// CHECK-NEXT:     %c3_i32 = constant 3 : i32
// CHECK-NEXT:     %0 = sir.alloc_stack : !sir.pointer<i32>
// CHECK-NEXT:     sir.store %c0_i32 : i32 into %0 : !sir.pointer<i32>
// CHECK-NEXT:     sir.store %c1_i32 : i32 into %0 : !sir.pointer<i32>
// CHECK-NEXT:     sir.store %c2_i32 : i32 into %0 : !sir.pointer<i32>
// CHECK-NEXT:     sir.store %c3_i32 : i32 into %0 : !sir.pointer<i32>
// CHECK-NEXT:     return
// CHECK-NEXT:   }
// CHECK-NEXT: }
