// NOTE: CHECK lines have been generated by utils/update_filecheck_test.py
// RUN: sorac -emit-sirgen -g %s | FileCheck %s

func foo() {
  let ()
  let () = ()

  let (a0, a1) = (0, 1)
  let ((b0, b1, b2), (b3, b4)) = ((0, -2, -3), (0.1, 3.14))

  let ((a, (_, _)), b) = ((0, (1, 2)), 3)
}

// CHECK:      module @"{{.*}}" {
// CHECK-NEXT:   func @foo() {
// CHECK-NEXT:     %0 = sir.void_constant loc("{{.*}}":6:12)
// CHECK-NEXT:     %c0_i32 = constant 0 : i32 loc("{{.*}}":8:19)
// CHECK-NEXT:     %c1_i32 = constant 1 : i32 loc("{{.*}}":8:22)
// CHECK-NEXT:     %1 = sir.create_tuple(%c0_i32, %c1_i32 : i32, i32) -> tuple<i32, i32> loc("{{.*}}":8:18)
// CHECK-NEXT:     %2:2 = sir.destructure_tuple %1 : (tuple<i32, i32>) -> (i32, i32) loc("{{.*}}":8:7)
// CHECK-NEXT:     %3 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":8:8)
// CHECK-NEXT:     sir.store %2#0 : i32 into %3 : !sir.pointer<i32> loc("{{.*}}":8:8)
// CHECK-NEXT:     %4 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":8:12)
// CHECK-NEXT:     sir.store %2#1 : i32 into %4 : !sir.pointer<i32> loc("{{.*}}":8:12)
// CHECK-NEXT:     %c0_i32_0 = constant 0 : i32 loc("{{.*}}":9:36)
// CHECK-NEXT:     %c2_i32 = constant 2 : i32 loc("{{.*}}":9:40)
// CHECK-NEXT:     %c0_i32_1 = constant 0 : i32 loc("{{.*}}":9:39)
// CHECK-NEXT:     %5 = subi %c0_i32_1, %c2_i32 : i32 loc("{{.*}}":9:39)
// CHECK-NEXT:     %c3_i32 = constant 3 : i32 loc("{{.*}}":9:44)
// CHECK-NEXT:     %c0_i32_2 = constant 0 : i32 loc("{{.*}}":9:43)
// CHECK-NEXT:     %6 = subi %c0_i32_2, %c3_i32 : i32 loc("{{.*}}":9:43)
// CHECK-NEXT:     %7 = sir.create_tuple(%c0_i32_0, %5, %6 : i32, i32, i32) -> tuple<i32, i32, i32> loc("{{.*}}":9:35)
// CHECK-NEXT:     %cst = constant 1.000000e-01 : f32 loc("{{.*}}":9:49)
// CHECK-NEXT:     %cst_3 = constant 3.140000e+00 : f32 loc("{{.*}}":9:54)
// CHECK-NEXT:     %8 = sir.create_tuple(%cst, %cst_3 : f32, f32) -> tuple<f32, f32> loc("{{.*}}":9:48)
// CHECK-NEXT:     %9 = sir.create_tuple(%7, %8 : tuple<i32, i32, i32>, tuple<f32, f32>) -> tuple<tuple<i32, i32, i32>, tuple<f32, f32>> loc("{{.*}}":9:34)
// CHECK-NEXT:     %10:2 = sir.destructure_tuple %9 : (tuple<tuple<i32, i32, i32>, tuple<f32, f32>>) -> (tuple<i32, i32, i32>, tuple<f32, f32>) loc("{{.*}}":9:7)
// CHECK-NEXT:     %11:3 = sir.destructure_tuple %10#0 : (tuple<i32, i32, i32>) -> (i32, i32, i32) loc("{{.*}}":9:8)
// CHECK-NEXT:     %12 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":9:9)
// CHECK-NEXT:     sir.store %11#0 : i32 into %12 : !sir.pointer<i32> loc("{{.*}}":9:9)
// CHECK-NEXT:     %13 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":9:13)
// CHECK-NEXT:     sir.store %11#1 : i32 into %13 : !sir.pointer<i32> loc("{{.*}}":9:13)
// CHECK-NEXT:     %14 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":9:17)
// CHECK-NEXT:     sir.store %11#2 : i32 into %14 : !sir.pointer<i32> loc("{{.*}}":9:17)
// CHECK-NEXT:     %15:2 = sir.destructure_tuple %10#1 : (tuple<f32, f32>) -> (f32, f32) loc("{{.*}}":9:22)
// CHECK-NEXT:     %16 = sir.alloc_stack : !sir.pointer<f32> loc("{{.*}}":9:23)
// CHECK-NEXT:     sir.store %15#0 : f32 into %16 : !sir.pointer<f32> loc("{{.*}}":9:23)
// CHECK-NEXT:     %17 = sir.alloc_stack : !sir.pointer<f32> loc("{{.*}}":9:27)
// CHECK-NEXT:     sir.store %15#1 : f32 into %17 : !sir.pointer<f32> loc("{{.*}}":9:27)
// CHECK-NEXT:     %c0_i32_4 = constant 0 : i32 loc("{{.*}}":11:28)
// CHECK-NEXT:     %c1_i32_5 = constant 1 : i32 loc("{{.*}}":11:32)
// CHECK-NEXT:     %c2_i32_6 = constant 2 : i32 loc("{{.*}}":11:35)
// CHECK-NEXT:     %18 = sir.create_tuple(%c1_i32_5, %c2_i32_6 : i32, i32) -> tuple<i32, i32> loc("{{.*}}":11:31)
// CHECK-NEXT:     %19 = sir.create_tuple(%c0_i32_4, %18 : i32, tuple<i32, i32>) -> tuple<i32, tuple<i32, i32>> loc("{{.*}}":11:27)
// CHECK-NEXT:     %c3_i32_7 = constant 3 : i32 loc("{{.*}}":11:40)
// CHECK-NEXT:     %20 = sir.create_tuple(%19, %c3_i32_7 : tuple<i32, tuple<i32, i32>>, i32) -> tuple<tuple<i32, tuple<i32, i32>>, i32> loc("{{.*}}":11:26)
// CHECK-NEXT:     %21:2 = sir.destructure_tuple %20 : (tuple<tuple<i32, tuple<i32, i32>>, i32>) -> (tuple<i32, tuple<i32, i32>>, i32) loc("{{.*}}":11:7)
// CHECK-NEXT:     %22:2 = sir.destructure_tuple %21#0 : (tuple<i32, tuple<i32, i32>>) -> (i32, tuple<i32, i32>) loc("{{.*}}":11:8)
// CHECK-NEXT:     %23 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":11:9)
// CHECK-NEXT:     sir.store %22#0 : i32 into %23 : !sir.pointer<i32> loc("{{.*}}":11:9)
// CHECK-NEXT:     %24 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":11:21)
// CHECK-NEXT:     sir.store %21#1 : i32 into %24 : !sir.pointer<i32> loc("{{.*}}":11:21)
// CHECK-NEXT:     sir.default_return loc("{{.*}}":12:1)
// CHECK-NEXT:   } loc("{{.*}}":4:6)
// CHECK-NEXT: }
