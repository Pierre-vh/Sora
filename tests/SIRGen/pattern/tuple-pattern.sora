// NOTE: CHECK lines have been generated by utils/update_filecheck_test.py
// RUN: sorac -emit-sirgen -g %s | FileCheck %s

func foo() {
  let ()
  let () = ()

  let (a0, a1) = (0, 1)
  let ((b0, b1, b2), (b3, b4)) = ((0, -2, -3), (0.1, 3.14))
}

// CHECK:      module @"{{.*}}" {
// CHECK-NEXT:   func @foo() {
// CHECK-NEXT:     %0 = sir.void_constant loc("{{.*}}":6:12)
// CHECK-NEXT:     %c0_i32 = constant 0 : i32 loc("{{.*}}":8:19)
// CHECK-NEXT:     %c1_i32 = constant 1 : i32 loc("{{.*}}":8:22)
// CHECK-NEXT:     %1 = sir.create_tuple(%c0_i32, %c1_i32 : i32, i32) -> tuple<i32, i32> loc("{{.*}}":8:18)
// CHECK-NEXT:     %2:2 = sir.destructure_tuple %1 : (tuple<i32, i32>) -> (i32, i32) loc("{{.*}}":8:7)
// CHECK-NEXT:     %3 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":8:8)
// CHECK-NEXT:     sir.store %2#0 : i32 into %3 : !sir.pointer<i32> loc("{{.*}}":8:8)
// CHECK-NEXT:     %4 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":8:12)
// CHECK-NEXT:     sir.store %2#1 : i32 into %4 : !sir.pointer<i32> loc("{{.*}}":8:12)
// CHECK-NEXT:     %c0_i32_0 = constant 0 : i32 loc("{{.*}}":9:36)
// CHECK-NEXT:     %c-2_i32 = constant -2 : i32 loc("{{.*}}":9:40)
// CHECK-NEXT:     %c-3_i32 = constant -3 : i32 loc("{{.*}}":9:44)
// CHECK-NEXT:     %5 = sir.create_tuple(%c0_i32_0, %c-2_i32, %c-3_i32 : i32, i32, i32) -> tuple<i32, i32, i32> loc("{{.*}}":9:35)
// CHECK-NEXT:     %cst = constant 1.000000e-01 : f32 loc("{{.*}}":9:49)
// CHECK-NEXT:     %cst_1 = constant 3.140000e+00 : f32 loc("{{.*}}":9:54)
// CHECK-NEXT:     %6 = sir.create_tuple(%cst, %cst_1 : f32, f32) -> tuple<f32, f32> loc("{{.*}}":9:48)
// CHECK-NEXT:     %7 = sir.create_tuple(%5, %6 : tuple<i32, i32, i32>, tuple<f32, f32>) -> tuple<tuple<i32, i32, i32>, tuple<f32, f32>> loc("{{.*}}":9:34)
// CHECK-NEXT:     %8:2 = sir.destructure_tuple %7 : (tuple<tuple<i32, i32, i32>, tuple<f32, f32>>) -> (tuple<i32, i32, i32>, tuple<f32, f32>) loc("{{.*}}":9:7)
// CHECK-NEXT:     %9:3 = sir.destructure_tuple %8#0 : (tuple<i32, i32, i32>) -> (i32, i32, i32) loc("{{.*}}":9:8)
// CHECK-NEXT:     %10 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":9:9)
// CHECK-NEXT:     sir.store %9#0 : i32 into %10 : !sir.pointer<i32> loc("{{.*}}":9:9)
// CHECK-NEXT:     %11 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":9:13)
// CHECK-NEXT:     sir.store %9#1 : i32 into %11 : !sir.pointer<i32> loc("{{.*}}":9:13)
// CHECK-NEXT:     %12 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":9:17)
// CHECK-NEXT:     sir.store %9#2 : i32 into %12 : !sir.pointer<i32> loc("{{.*}}":9:17)
// CHECK-NEXT:     %13:2 = sir.destructure_tuple %8#1 : (tuple<f32, f32>) -> (f32, f32) loc("{{.*}}":9:22)
// CHECK-NEXT:     %14 = sir.alloc_stack : !sir.pointer<f32> loc("{{.*}}":9:23)
// CHECK-NEXT:     sir.store %13#0 : f32 into %14 : !sir.pointer<f32> loc("{{.*}}":9:23)
// CHECK-NEXT:     %15 = sir.alloc_stack : !sir.pointer<f32> loc("{{.*}}":9:27)
// CHECK-NEXT:     sir.store %13#1 : f32 into %15 : !sir.pointer<f32> loc("{{.*}}":9:27)
// CHECK-NEXT:   } loc("{{.*}}":4:6)
// CHECK-NEXT: }
