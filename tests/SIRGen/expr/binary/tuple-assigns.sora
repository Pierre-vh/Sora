// NOTE: CHECK lines have been generated by utils/update_filecheck_test.py
// RUN: sorac -emit-sirgen -g %s | FileCheck %s

// Tests assignements with TupleExprs on the LHS.

func foo() {
  let src = (0, 1)
  let mut dest = (0, 1)

  let mut a: i32
  let mut b: i32

  dest = src
  (_, _) = src
  (a, _) = src
  (_, b) = src
  dest = (0, 1)
}

func bar() {
  let src = (true, false, 0 as u8, (1 as i8, 2 as u32))
  let mut dest = (false, true, 1 as u8, (2 as i8, 3 as u32))

  let mut (a: bool, b: bool, c: u8, (d: i8, e: u32))

  dest = src

  (_, _, _, ( _, _)) = src
  (a, _, _, ( _, _)) = src
  (a, b, _, ( _, _)) = src
  (a, b, c, ( _, _)) = src
  (a, b, c, ( d, _)) = src
  (a, b, c, ( d, e)) = src
  (_, b, _, ( d, _)) = src

  dest =  (false, true, 1 as u8, (2 as i8, 3 as u32))
}

// CHECK:      module @"{{.*}}" {
// CHECK-NEXT:   func @foo() {
// CHECK-NEXT:     %c0_i32 = constant 0 : i32 loc("{{.*}}":7:14)
// CHECK-NEXT:     %c1_i32 = constant 1 : i32 loc("{{.*}}":7:17)
// CHECK-NEXT:     %0 = sir.create_tuple(%c0_i32, %c1_i32 : i32, i32) -> tuple<i32, i32> loc("{{.*}}":7:13)
// CHECK-NEXT:     %1 = sir.alloc_stack : !sir.pointer<tuple<i32, i32>> loc("{{.*}}":7:7)
// CHECK-NEXT:     sir.store %0 : tuple<i32, i32> into %1 : !sir.pointer<tuple<i32, i32>> loc("{{.*}}":7:7)
// CHECK-NEXT:     %c0_i32_0 = constant 0 : i32 loc("{{.*}}":8:19)
// CHECK-NEXT:     %c1_i32_1 = constant 1 : i32 loc("{{.*}}":8:22)
// CHECK-NEXT:     %2 = sir.create_tuple(%c0_i32_0, %c1_i32_1 : i32, i32) -> tuple<i32, i32> loc("{{.*}}":8:18)
// CHECK-NEXT:     %3 = sir.alloc_stack : !sir.pointer<tuple<i32, i32>> loc("{{.*}}":8:11)
// CHECK-NEXT:     sir.store %2 : tuple<i32, i32> into %3 : !sir.pointer<tuple<i32, i32>> loc("{{.*}}":8:11)
// CHECK-NEXT:     %4 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":10:11)
// CHECK-NEXT:     %5 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":11:11)
// CHECK-NEXT:     %6 = sir.load %1 : (!sir.pointer<tuple<i32, i32>>) -> tuple<i32, i32> loc("{{.*}}":13:10)
// CHECK-NEXT:     sir.store %6 : tuple<i32, i32> into %3 : !sir.pointer<tuple<i32, i32>> loc("{{.*}}":13:8)
// CHECK-NEXT:     %7 = sir.load %1 : (!sir.pointer<tuple<i32, i32>>) -> tuple<i32, i32> loc("{{.*}}":14:12)
// CHECK-NEXT:     %8:2 = sir.destructure_tuple %7 : (tuple<i32, i32>) -> (i32, i32) loc("{{.*}}":14:10)
// CHECK-NEXT:     %9 = sir.load %1 : (!sir.pointer<tuple<i32, i32>>) -> tuple<i32, i32> loc("{{.*}}":15:12)
// CHECK-NEXT:     %10:2 = sir.destructure_tuple %9 : (tuple<i32, i32>) -> (i32, i32) loc("{{.*}}":15:10)
// CHECK-NEXT:     sir.store %10#0 : i32 into %4 : !sir.pointer<i32> loc("{{.*}}":15:10)
// CHECK-NEXT:     %11 = sir.load %1 : (!sir.pointer<tuple<i32, i32>>) -> tuple<i32, i32> loc("{{.*}}":16:12)
// CHECK-NEXT:     %12:2 = sir.destructure_tuple %11 : (tuple<i32, i32>) -> (i32, i32) loc("{{.*}}":16:10)
// CHECK-NEXT:     sir.store %12#1 : i32 into %5 : !sir.pointer<i32> loc("{{.*}}":16:10)
// CHECK-NEXT:     %c0_i32_2 = constant 0 : i32 loc("{{.*}}":17:11)
// CHECK-NEXT:     %c1_i32_3 = constant 1 : i32 loc("{{.*}}":17:14)
// CHECK-NEXT:     %13 = sir.create_tuple(%c0_i32_2, %c1_i32_3 : i32, i32) -> tuple<i32, i32> loc("{{.*}}":17:10)
// CHECK-NEXT:     sir.store %13 : tuple<i32, i32> into %3 : !sir.pointer<tuple<i32, i32>> loc("{{.*}}":17:8)
// CHECK-NEXT:     sir.default_return loc("{{.*}}":18:1)
// CHECK-NEXT:   } loc("{{.*}}":6:6)
// CHECK-NEXT:   func @bar() {
// CHECK-NEXT:     %true = constant 1 : i1 loc("{{.*}}":21:14)
// CHECK-NEXT:     %false = constant 0 : i1 loc("{{.*}}":21:20)
// CHECK-NEXT:     %c0_i8 = constant 0 : i8 loc("{{.*}}":21:27)
// CHECK-NEXT:     %c1_i8 = constant 1 : i8 loc("{{.*}}":21:37)
// CHECK-NEXT:     %c2_i32 = constant 2 : i32 loc("{{.*}}":21:46)
// CHECK-NEXT:     %0 = sir.create_tuple(%c1_i8, %c2_i32 : i8, i32) -> tuple<i8, i32> loc("{{.*}}":21:36)
// CHECK-NEXT:     %1 = sir.create_tuple(%true, %false, %c0_i8, %0 : i1, i1, i8, tuple<i8, i32>) -> tuple<i1, i1, i8, tuple<i8, i32>> loc("{{.*}}":21:13)
// CHECK-NEXT:     %2 = sir.alloc_stack : !sir.pointer<tuple<i1, i1, i8, tuple<i8, i32>>> loc("{{.*}}":21:7)
// CHECK-NEXT:     sir.store %1 : tuple<i1, i1, i8, tuple<i8, i32>> into %2 : !sir.pointer<tuple<i1, i1, i8, tuple<i8, i32>>> loc("{{.*}}":21:7)
// CHECK-NEXT:     %false_0 = constant 0 : i1 loc("{{.*}}":22:19)
// CHECK-NEXT:     %true_1 = constant 1 : i1 loc("{{.*}}":22:26)
// CHECK-NEXT:     %c1_i8_2 = constant 1 : i8 loc("{{.*}}":22:32)
// CHECK-NEXT:     %c2_i8 = constant 2 : i8 loc("{{.*}}":22:42)
// CHECK-NEXT:     %c3_i32 = constant 3 : i32 loc("{{.*}}":22:51)
// CHECK-NEXT:     %3 = sir.create_tuple(%c2_i8, %c3_i32 : i8, i32) -> tuple<i8, i32> loc("{{.*}}":22:41)
// CHECK-NEXT:     %4 = sir.create_tuple(%false_0, %true_1, %c1_i8_2, %3 : i1, i1, i8, tuple<i8, i32>) -> tuple<i1, i1, i8, tuple<i8, i32>> loc("{{.*}}":22:18)
// CHECK-NEXT:     %5 = sir.alloc_stack : !sir.pointer<tuple<i1, i1, i8, tuple<i8, i32>>> loc("{{.*}}":22:11)
// CHECK-NEXT:     sir.store %4 : tuple<i1, i1, i8, tuple<i8, i32>> into %5 : !sir.pointer<tuple<i1, i1, i8, tuple<i8, i32>>> loc("{{.*}}":22:11)
// CHECK-NEXT:     %6 = sir.alloc_stack : !sir.pointer<i1> loc("{{.*}}":24:12)
// CHECK-NEXT:     %7 = sir.alloc_stack : !sir.pointer<i1> loc("{{.*}}":24:21)
// CHECK-NEXT:     %8 = sir.alloc_stack : !sir.pointer<i8> loc("{{.*}}":24:30)
// CHECK-NEXT:     %9 = sir.alloc_stack : !sir.pointer<i8> loc("{{.*}}":24:38)
// CHECK-NEXT:     %10 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":24:45)
// CHECK-NEXT:     %11 = sir.load %2 : (!sir.pointer<tuple<i1, i1, i8, tuple<i8, i32>>>) -> tuple<i1, i1, i8, tuple<i8, i32>> loc("{{.*}}":26:10)
// CHECK-NEXT:     sir.store %11 : tuple<i1, i1, i8, tuple<i8, i32>> into %5 : !sir.pointer<tuple<i1, i1, i8, tuple<i8, i32>>> loc("{{.*}}":26:8)
// CHECK-NEXT:     %12 = sir.load %2 : (!sir.pointer<tuple<i1, i1, i8, tuple<i8, i32>>>) -> tuple<i1, i1, i8, tuple<i8, i32>> loc("{{.*}}":28:24)
// CHECK-NEXT:     %13:4 = sir.destructure_tuple %12 : (tuple<i1, i1, i8, tuple<i8, i32>>) -> (i1, i1, i8, tuple<i8, i32>) loc("{{.*}}":28:22)
// CHECK-NEXT:     %14:2 = sir.destructure_tuple %13#3 : (tuple<i8, i32>) -> (i8, i32) loc("{{.*}}":28:22)
// CHECK-NEXT:     %15 = sir.load %2 : (!sir.pointer<tuple<i1, i1, i8, tuple<i8, i32>>>) -> tuple<i1, i1, i8, tuple<i8, i32>> loc("{{.*}}":29:24)
// CHECK-NEXT:     %16:4 = sir.destructure_tuple %15 : (tuple<i1, i1, i8, tuple<i8, i32>>) -> (i1, i1, i8, tuple<i8, i32>) loc("{{.*}}":29:22)
// CHECK-NEXT:     sir.store %16#0 : i1 into %6 : !sir.pointer<i1> loc("{{.*}}":29:22)
// CHECK-NEXT:     %17:2 = sir.destructure_tuple %16#3 : (tuple<i8, i32>) -> (i8, i32) loc("{{.*}}":29:22)
// CHECK-NEXT:     %18 = sir.load %2 : (!sir.pointer<tuple<i1, i1, i8, tuple<i8, i32>>>) -> tuple<i1, i1, i8, tuple<i8, i32>> loc("{{.*}}":30:24)
// CHECK-NEXT:     %19:4 = sir.destructure_tuple %18 : (tuple<i1, i1, i8, tuple<i8, i32>>) -> (i1, i1, i8, tuple<i8, i32>) loc("{{.*}}":30:22)
// CHECK-NEXT:     sir.store %19#0 : i1 into %6 : !sir.pointer<i1> loc("{{.*}}":30:22)
// CHECK-NEXT:     sir.store %19#1 : i1 into %7 : !sir.pointer<i1> loc("{{.*}}":30:22)
// CHECK-NEXT:     %20:2 = sir.destructure_tuple %19#3 : (tuple<i8, i32>) -> (i8, i32) loc("{{.*}}":30:22)
// CHECK-NEXT:     %21 = sir.load %2 : (!sir.pointer<tuple<i1, i1, i8, tuple<i8, i32>>>) -> tuple<i1, i1, i8, tuple<i8, i32>> loc("{{.*}}":31:24)
// CHECK-NEXT:     %22:4 = sir.destructure_tuple %21 : (tuple<i1, i1, i8, tuple<i8, i32>>) -> (i1, i1, i8, tuple<i8, i32>) loc("{{.*}}":31:22)
// CHECK-NEXT:     sir.store %22#0 : i1 into %6 : !sir.pointer<i1> loc("{{.*}}":31:22)
// CHECK-NEXT:     sir.store %22#1 : i1 into %7 : !sir.pointer<i1> loc("{{.*}}":31:22)
// CHECK-NEXT:     sir.store %22#2 : i8 into %8 : !sir.pointer<i8> loc("{{.*}}":31:22)
// CHECK-NEXT:     %23:2 = sir.destructure_tuple %22#3 : (tuple<i8, i32>) -> (i8, i32) loc("{{.*}}":31:22)
// CHECK-NEXT:     %24 = sir.load %2 : (!sir.pointer<tuple<i1, i1, i8, tuple<i8, i32>>>) -> tuple<i1, i1, i8, tuple<i8, i32>> loc("{{.*}}":32:24)
// CHECK-NEXT:     %25:4 = sir.destructure_tuple %24 : (tuple<i1, i1, i8, tuple<i8, i32>>) -> (i1, i1, i8, tuple<i8, i32>) loc("{{.*}}":32:22)
// CHECK-NEXT:     sir.store %25#0 : i1 into %6 : !sir.pointer<i1> loc("{{.*}}":32:22)
// CHECK-NEXT:     sir.store %25#1 : i1 into %7 : !sir.pointer<i1> loc("{{.*}}":32:22)
// CHECK-NEXT:     sir.store %25#2 : i8 into %8 : !sir.pointer<i8> loc("{{.*}}":32:22)
// CHECK-NEXT:     %26:2 = sir.destructure_tuple %25#3 : (tuple<i8, i32>) -> (i8, i32) loc("{{.*}}":32:22)
// CHECK-NEXT:     sir.store %26#0 : i8 into %9 : !sir.pointer<i8> loc("{{.*}}":32:22)
// CHECK-NEXT:     %27 = sir.load %2 : (!sir.pointer<tuple<i1, i1, i8, tuple<i8, i32>>>) -> tuple<i1, i1, i8, tuple<i8, i32>> loc("{{.*}}":33:24)
// CHECK-NEXT:     %28:4 = sir.destructure_tuple %27 : (tuple<i1, i1, i8, tuple<i8, i32>>) -> (i1, i1, i8, tuple<i8, i32>) loc("{{.*}}":33:22)
// CHECK-NEXT:     sir.store %28#0 : i1 into %6 : !sir.pointer<i1> loc("{{.*}}":33:22)
// CHECK-NEXT:     sir.store %28#1 : i1 into %7 : !sir.pointer<i1> loc("{{.*}}":33:22)
// CHECK-NEXT:     sir.store %28#2 : i8 into %8 : !sir.pointer<i8> loc("{{.*}}":33:22)
// CHECK-NEXT:     %29:2 = sir.destructure_tuple %28#3 : (tuple<i8, i32>) -> (i8, i32) loc("{{.*}}":33:22)
// CHECK-NEXT:     sir.store %29#0 : i8 into %9 : !sir.pointer<i8> loc("{{.*}}":33:22)
// CHECK-NEXT:     sir.store %29#1 : i32 into %10 : !sir.pointer<i32> loc("{{.*}}":33:22)
// CHECK-NEXT:     %30 = sir.load %2 : (!sir.pointer<tuple<i1, i1, i8, tuple<i8, i32>>>) -> tuple<i1, i1, i8, tuple<i8, i32>> loc("{{.*}}":34:24)
// CHECK-NEXT:     %31:4 = sir.destructure_tuple %30 : (tuple<i1, i1, i8, tuple<i8, i32>>) -> (i1, i1, i8, tuple<i8, i32>) loc("{{.*}}":34:22)
// CHECK-NEXT:     sir.store %31#1 : i1 into %7 : !sir.pointer<i1> loc("{{.*}}":34:22)
// CHECK-NEXT:     %32:2 = sir.destructure_tuple %31#3 : (tuple<i8, i32>) -> (i8, i32) loc("{{.*}}":34:22)
// CHECK-NEXT:     sir.store %32#0 : i8 into %9 : !sir.pointer<i8> loc("{{.*}}":34:22)
// CHECK-NEXT:     %false_3 = constant 0 : i1 loc("{{.*}}":36:12)
// CHECK-NEXT:     %true_4 = constant 1 : i1 loc("{{.*}}":36:19)
// CHECK-NEXT:     %c1_i8_5 = constant 1 : i8 loc("{{.*}}":36:25)
// CHECK-NEXT:     %c2_i8_6 = constant 2 : i8 loc("{{.*}}":36:35)
// CHECK-NEXT:     %c3_i32_7 = constant 3 : i32 loc("{{.*}}":36:44)
// CHECK-NEXT:     %33 = sir.create_tuple(%c2_i8_6, %c3_i32_7 : i8, i32) -> tuple<i8, i32> loc("{{.*}}":36:34)
// CHECK-NEXT:     %34 = sir.create_tuple(%false_3, %true_4, %c1_i8_5, %33 : i1, i1, i8, tuple<i8, i32>) -> tuple<i1, i1, i8, tuple<i8, i32>> loc("{{.*}}":36:11)
// CHECK-NEXT:     sir.store %34 : tuple<i1, i1, i8, tuple<i8, i32>> into %5 : !sir.pointer<tuple<i1, i1, i8, tuple<i8, i32>>> loc("{{.*}}":36:8)
// CHECK-NEXT:     sir.default_return loc("{{.*}}":37:1)
// CHECK-NEXT:   } loc("{{.*}}":20:6)
// CHECK-NEXT: }
