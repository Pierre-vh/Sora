// NOTE: CHECK lines have been generated by utils/update_filecheck_test.py
// RUN: sorac -emit-sirgen -g %s | FileCheck %s

func unaryMinusInt() {
  let y = 0

  -y
  -(y)
  --y
  -(-(y))
  ---y
  -(-(-(y)))

  -1
  -(1)
  --10
  -(-(10))
  ---100
  -(-(-(100)))
}

func unaryMinusFlt() {
  let y = 1.0

  -y
  -(y)
  --y
  -(-(y))
  ---y
  -(-(-(y)))

  -1.0
  -(1.0)
  --10.0
  -(-(10.0))
  ---100.0
  -(-(-(100.0)))
}

// CHECK:      module @"{{.*}}" {
// CHECK-NEXT:   func @unaryMinusInt() {
// CHECK-NEXT:     %c0_i32 = constant 0 : i32 loc("{{.*}}":5:11)
// CHECK-NEXT:     %0 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":5:7)
// CHECK-NEXT:     sir.store %c0_i32 : i32 into %0 : !sir.pointer<i32> loc("{{.*}}":5:7)
// CHECK-NEXT:     %1 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":7:4)
// CHECK-NEXT:     %c0_i32_0 = constant 0 : i32 loc("{{.*}}":7:3)
// CHECK-NEXT:     %2 = subi %c0_i32_0, %1 : i32 loc("{{.*}}":7:3)
// CHECK-NEXT:     %3 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":8:5)
// CHECK-NEXT:     %c0_i32_1 = constant 0 : i32 loc("{{.*}}":8:3)
// CHECK-NEXT:     %4 = subi %c0_i32_1, %3 : i32 loc("{{.*}}":8:3)
// CHECK-NEXT:     %5 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":9:5)
// CHECK-NEXT:     %c0_i32_2 = constant 0 : i32 loc("{{.*}}":9:4)
// CHECK-NEXT:     %6 = subi %c0_i32_2, %5 : i32 loc("{{.*}}":9:4)
// CHECK-NEXT:     %c0_i32_3 = constant 0 : i32 loc("{{.*}}":9:3)
// CHECK-NEXT:     %7 = subi %c0_i32_3, %6 : i32 loc("{{.*}}":9:3)
// CHECK-NEXT:     %8 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":10:7)
// CHECK-NEXT:     %c0_i32_4 = constant 0 : i32 loc("{{.*}}":10:5)
// CHECK-NEXT:     %9 = subi %c0_i32_4, %8 : i32 loc("{{.*}}":10:5)
// CHECK-NEXT:     %c0_i32_5 = constant 0 : i32 loc("{{.*}}":10:3)
// CHECK-NEXT:     %10 = subi %c0_i32_5, %9 : i32 loc("{{.*}}":10:3)
// CHECK-NEXT:     %11 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":11:6)
// CHECK-NEXT:     %c0_i32_6 = constant 0 : i32 loc("{{.*}}":11:5)
// CHECK-NEXT:     %12 = subi %c0_i32_6, %11 : i32 loc("{{.*}}":11:5)
// CHECK-NEXT:     %c0_i32_7 = constant 0 : i32 loc("{{.*}}":11:4)
// CHECK-NEXT:     %13 = subi %c0_i32_7, %12 : i32 loc("{{.*}}":11:4)
// CHECK-NEXT:     %c0_i32_8 = constant 0 : i32 loc("{{.*}}":11:3)
// CHECK-NEXT:     %14 = subi %c0_i32_8, %13 : i32 loc("{{.*}}":11:3)
// CHECK-NEXT:     %15 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":12:9)
// CHECK-NEXT:     %c0_i32_9 = constant 0 : i32 loc("{{.*}}":12:7)
// CHECK-NEXT:     %16 = subi %c0_i32_9, %15 : i32 loc("{{.*}}":12:7)
// CHECK-NEXT:     %c0_i32_10 = constant 0 : i32 loc("{{.*}}":12:5)
// CHECK-NEXT:     %17 = subi %c0_i32_10, %16 : i32 loc("{{.*}}":12:5)
// CHECK-NEXT:     %c0_i32_11 = constant 0 : i32 loc("{{.*}}":12:3)
// CHECK-NEXT:     %18 = subi %c0_i32_11, %17 : i32 loc("{{.*}}":12:3)
// CHECK-NEXT:     %c1_i32 = constant 1 : i32 loc("{{.*}}":14:4)
// CHECK-NEXT:     %c0_i32_12 = constant 0 : i32 loc("{{.*}}":14:3)
// CHECK-NEXT:     %19 = subi %c0_i32_12, %c1_i32 : i32 loc("{{.*}}":14:3)
// CHECK-NEXT:     %c1_i32_13 = constant 1 : i32 loc("{{.*}}":15:5)
// CHECK-NEXT:     %c0_i32_14 = constant 0 : i32 loc("{{.*}}":15:3)
// CHECK-NEXT:     %20 = subi %c0_i32_14, %c1_i32_13 : i32 loc("{{.*}}":15:3)
// CHECK-NEXT:     %c10_i32 = constant 10 : i32 loc("{{.*}}":16:5)
// CHECK-NEXT:     %c0_i32_15 = constant 0 : i32 loc("{{.*}}":16:4)
// CHECK-NEXT:     %21 = subi %c0_i32_15, %c10_i32 : i32 loc("{{.*}}":16:4)
// CHECK-NEXT:     %c0_i32_16 = constant 0 : i32 loc("{{.*}}":16:3)
// CHECK-NEXT:     %22 = subi %c0_i32_16, %21 : i32 loc("{{.*}}":16:3)
// CHECK-NEXT:     %c10_i32_17 = constant 10 : i32 loc("{{.*}}":17:7)
// CHECK-NEXT:     %c0_i32_18 = constant 0 : i32 loc("{{.*}}":17:5)
// CHECK-NEXT:     %23 = subi %c0_i32_18, %c10_i32_17 : i32 loc("{{.*}}":17:5)
// CHECK-NEXT:     %c0_i32_19 = constant 0 : i32 loc("{{.*}}":17:3)
// CHECK-NEXT:     %24 = subi %c0_i32_19, %23 : i32 loc("{{.*}}":17:3)
// CHECK-NEXT:     %c100_i32 = constant 100 : i32 loc("{{.*}}":18:6)
// CHECK-NEXT:     %c0_i32_20 = constant 0 : i32 loc("{{.*}}":18:5)
// CHECK-NEXT:     %25 = subi %c0_i32_20, %c100_i32 : i32 loc("{{.*}}":18:5)
// CHECK-NEXT:     %c0_i32_21 = constant 0 : i32 loc("{{.*}}":18:4)
// CHECK-NEXT:     %26 = subi %c0_i32_21, %25 : i32 loc("{{.*}}":18:4)
// CHECK-NEXT:     %c0_i32_22 = constant 0 : i32 loc("{{.*}}":18:3)
// CHECK-NEXT:     %27 = subi %c0_i32_22, %26 : i32 loc("{{.*}}":18:3)
// CHECK-NEXT:     %c100_i32_23 = constant 100 : i32 loc("{{.*}}":19:9)
// CHECK-NEXT:     %c0_i32_24 = constant 0 : i32 loc("{{.*}}":19:7)
// CHECK-NEXT:     %28 = subi %c0_i32_24, %c100_i32_23 : i32 loc("{{.*}}":19:7)
// CHECK-NEXT:     %c0_i32_25 = constant 0 : i32 loc("{{.*}}":19:5)
// CHECK-NEXT:     %29 = subi %c0_i32_25, %28 : i32 loc("{{.*}}":19:5)
// CHECK-NEXT:     %c0_i32_26 = constant 0 : i32 loc("{{.*}}":19:3)
// CHECK-NEXT:     %30 = subi %c0_i32_26, %29 : i32 loc("{{.*}}":19:3)
// CHECK-NEXT:     sir.default_return loc("{{.*}}":20:1)
// CHECK-NEXT:   } loc("{{.*}}":4:6)
// CHECK-NEXT:   func @unaryMinusFlt() {
// CHECK-NEXT:     %cst = constant 1.000000e+00 : f32 loc("{{.*}}":23:11)
// CHECK-NEXT:     %0 = sir.alloc_stack : !sir.pointer<f32> loc("{{.*}}":23:7)
// CHECK-NEXT:     sir.store %cst : f32 into %0 : !sir.pointer<f32> loc("{{.*}}":23:7)
// CHECK-NEXT:     %1 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":25:4)
// CHECK-NEXT:     %cst_0 = constant 0.000000e+00 : f32 loc("{{.*}}":25:3)
// CHECK-NEXT:     %2 = subf %cst_0, %1 : f32 loc("{{.*}}":25:3)
// CHECK-NEXT:     %3 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":26:5)
// CHECK-NEXT:     %cst_1 = constant 0.000000e+00 : f32 loc("{{.*}}":26:3)
// CHECK-NEXT:     %4 = subf %cst_1, %3 : f32 loc("{{.*}}":26:3)
// CHECK-NEXT:     %5 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":27:5)
// CHECK-NEXT:     %cst_2 = constant 0.000000e+00 : f32 loc("{{.*}}":27:4)
// CHECK-NEXT:     %6 = subf %cst_2, %5 : f32 loc("{{.*}}":27:4)
// CHECK-NEXT:     %cst_3 = constant 0.000000e+00 : f32 loc("{{.*}}":27:3)
// CHECK-NEXT:     %7 = subf %cst_3, %6 : f32 loc("{{.*}}":27:3)
// CHECK-NEXT:     %8 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":28:7)
// CHECK-NEXT:     %cst_4 = constant 0.000000e+00 : f32 loc("{{.*}}":28:5)
// CHECK-NEXT:     %9 = subf %cst_4, %8 : f32 loc("{{.*}}":28:5)
// CHECK-NEXT:     %cst_5 = constant 0.000000e+00 : f32 loc("{{.*}}":28:3)
// CHECK-NEXT:     %10 = subf %cst_5, %9 : f32 loc("{{.*}}":28:3)
// CHECK-NEXT:     %11 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":29:6)
// CHECK-NEXT:     %cst_6 = constant 0.000000e+00 : f32 loc("{{.*}}":29:5)
// CHECK-NEXT:     %12 = subf %cst_6, %11 : f32 loc("{{.*}}":29:5)
// CHECK-NEXT:     %cst_7 = constant 0.000000e+00 : f32 loc("{{.*}}":29:4)
// CHECK-NEXT:     %13 = subf %cst_7, %12 : f32 loc("{{.*}}":29:4)
// CHECK-NEXT:     %cst_8 = constant 0.000000e+00 : f32 loc("{{.*}}":29:3)
// CHECK-NEXT:     %14 = subf %cst_8, %13 : f32 loc("{{.*}}":29:3)
// CHECK-NEXT:     %15 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":30:9)
// CHECK-NEXT:     %cst_9 = constant 0.000000e+00 : f32 loc("{{.*}}":30:7)
// CHECK-NEXT:     %16 = subf %cst_9, %15 : f32 loc("{{.*}}":30:7)
// CHECK-NEXT:     %cst_10 = constant 0.000000e+00 : f32 loc("{{.*}}":30:5)
// CHECK-NEXT:     %17 = subf %cst_10, %16 : f32 loc("{{.*}}":30:5)
// CHECK-NEXT:     %cst_11 = constant 0.000000e+00 : f32 loc("{{.*}}":30:3)
// CHECK-NEXT:     %18 = subf %cst_11, %17 : f32 loc("{{.*}}":30:3)
// CHECK-NEXT:     %cst_12 = constant 1.000000e+00 : f32 loc("{{.*}}":32:4)
// CHECK-NEXT:     %cst_13 = constant 0.000000e+00 : f32 loc("{{.*}}":32:3)
// CHECK-NEXT:     %19 = subf %cst_13, %cst_12 : f32 loc("{{.*}}":32:3)
// CHECK-NEXT:     %cst_14 = constant 1.000000e+00 : f32 loc("{{.*}}":33:5)
// CHECK-NEXT:     %cst_15 = constant 0.000000e+00 : f32 loc("{{.*}}":33:3)
// CHECK-NEXT:     %20 = subf %cst_15, %cst_14 : f32 loc("{{.*}}":33:3)
// CHECK-NEXT:     %cst_16 = constant 1.000000e+01 : f32 loc("{{.*}}":34:5)
// CHECK-NEXT:     %cst_17 = constant 0.000000e+00 : f32 loc("{{.*}}":34:4)
// CHECK-NEXT:     %21 = subf %cst_17, %cst_16 : f32 loc("{{.*}}":34:4)
// CHECK-NEXT:     %cst_18 = constant 0.000000e+00 : f32 loc("{{.*}}":34:3)
// CHECK-NEXT:     %22 = subf %cst_18, %21 : f32 loc("{{.*}}":34:3)
// CHECK-NEXT:     %cst_19 = constant 1.000000e+01 : f32 loc("{{.*}}":35:7)
// CHECK-NEXT:     %cst_20 = constant 0.000000e+00 : f32 loc("{{.*}}":35:5)
// CHECK-NEXT:     %23 = subf %cst_20, %cst_19 : f32 loc("{{.*}}":35:5)
// CHECK-NEXT:     %cst_21 = constant 0.000000e+00 : f32 loc("{{.*}}":35:3)
// CHECK-NEXT:     %24 = subf %cst_21, %23 : f32 loc("{{.*}}":35:3)
// CHECK-NEXT:     %cst_22 = constant 1.000000e+02 : f32 loc("{{.*}}":36:6)
// CHECK-NEXT:     %cst_23 = constant 0.000000e+00 : f32 loc("{{.*}}":36:5)
// CHECK-NEXT:     %25 = subf %cst_23, %cst_22 : f32 loc("{{.*}}":36:5)
// CHECK-NEXT:     %cst_24 = constant 0.000000e+00 : f32 loc("{{.*}}":36:4)
// CHECK-NEXT:     %26 = subf %cst_24, %25 : f32 loc("{{.*}}":36:4)
// CHECK-NEXT:     %cst_25 = constant 0.000000e+00 : f32 loc("{{.*}}":36:3)
// CHECK-NEXT:     %27 = subf %cst_25, %26 : f32 loc("{{.*}}":36:3)
// CHECK-NEXT:     %cst_26 = constant 1.000000e+02 : f32 loc("{{.*}}":37:9)
// CHECK-NEXT:     %cst_27 = constant 0.000000e+00 : f32 loc("{{.*}}":37:7)
// CHECK-NEXT:     %28 = subf %cst_27, %cst_26 : f32 loc("{{.*}}":37:7)
// CHECK-NEXT:     %cst_28 = constant 0.000000e+00 : f32 loc("{{.*}}":37:5)
// CHECK-NEXT:     %29 = subf %cst_28, %28 : f32 loc("{{.*}}":37:5)
// CHECK-NEXT:     %cst_29 = constant 0.000000e+00 : f32 loc("{{.*}}":37:3)
// CHECK-NEXT:     %30 = subf %cst_29, %29 : f32 loc("{{.*}}":37:3)
// CHECK-NEXT:     sir.default_return loc("{{.*}}":38:1)
// CHECK-NEXT:   } loc("{{.*}}":22:6)
// CHECK-NEXT: }
