// NOTE: CHECK lines have been generated by utils/update_filecheck_test.py
// RUN: sorac -emit-sirgen -g %s | FileCheck %s

func foo() {
  let (a, mut b) = (0, 1)
  let c = (0, 1, 2)

  _ = &a
  _ = &b
  _ = &c
}

// CHECK:      module @"{{.*}}" {
// CHECK-NEXT:   func @foo() {
// CHECK-NEXT:     %c0_i32 = constant 0 : i32 loc("{{.*}}":5:21)
// CHECK-NEXT:     %c1_i32 = constant 1 : i32 loc("{{.*}}":5:24)
// CHECK-NEXT:     %0 = sir.create_tuple(%c0_i32, %c1_i32 : i32, i32) -> tuple<i32, i32> loc("{{.*}}":5:20)
// CHECK-NEXT:     %1:2 = sir.destructure_tuple %0 : (tuple<i32, i32>) -> (i32, i32) loc("{{.*}}":5:7)
// CHECK-NEXT:     %2 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":5:8)
// CHECK-NEXT:     sir.store %1#0 : i32 into %2 : !sir.pointer<i32> loc("{{.*}}":5:8)
// CHECK-NEXT:     %3 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":5:15)
// CHECK-NEXT:     sir.store %1#1 : i32 into %3 : !sir.pointer<i32> loc("{{.*}}":5:15)
// CHECK-NEXT:     %c0_i32_0 = constant 0 : i32 loc("{{.*}}":6:12)
// CHECK-NEXT:     %c1_i32_1 = constant 1 : i32 loc("{{.*}}":6:15)
// CHECK-NEXT:     %c2_i32 = constant 2 : i32 loc("{{.*}}":6:18)
// CHECK-NEXT:     %4 = sir.create_tuple(%c0_i32_0, %c1_i32_1, %c2_i32 : i32, i32, i32) -> tuple<i32, i32, i32> loc("{{.*}}":6:11)
// CHECK-NEXT:     %5 = sir.alloc_stack : !sir.pointer<tuple<i32, i32, i32>> loc("{{.*}}":6:7)
// CHECK-NEXT:     sir.store %4 : tuple<i32, i32, i32> into %5 : !sir.pointer<tuple<i32, i32, i32>> loc("{{.*}}":6:7)
// CHECK-NEXT:     %6 = sir.static_cast %2 : !sir.pointer<i32> to !sir.reference<i32> loc("{{.*}}":8:7)
// CHECK-NEXT:     %7 = sir.static_cast %3 : !sir.pointer<i32> to !sir.reference<i32> loc("{{.*}}":9:7)
// CHECK-NEXT:     %8 = sir.static_cast %5 : !sir.pointer<tuple<i32, i32, i32>> to !sir.reference<tuple<i32, i32, i32>> loc("{{.*}}":10:7)
// CHECK-NEXT:     sir.default_return loc("{{.*}}":11:1)
// CHECK-NEXT:   } loc("{{.*}}":4:6)
// CHECK-NEXT: }
