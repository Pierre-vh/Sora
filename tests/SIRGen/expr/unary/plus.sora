// NOTE: CHECK lines have been generated by utils/update_filecheck_test.py
// RUN: sorac -emit-sirgen -g %s | FileCheck %s

func unaryPlusInt() {
  let y = 0

  +y
  +(y)
  ++y
  +(+(y))
  +++y
  +(+(+(y)))

  +1
  +(1)
  ++10
  +(+(10))
  +++100
  +(+(+(100)))
}

func unaryPlusFlt() {
  let y = 1.0

  +y
  +(y)
  ++y
  +(+(y))
  +++y
  +(+(+(y)))

  +1.0
  +(1.0)
  ++10.0
  +(+(10.0))
  +++100.0
  +(+(+(100.0)))
}

// CHECK:      module @"{{.*}}" {
// CHECK-NEXT:   func @unaryPlusInt() {
// CHECK-NEXT:     %c0_i32 = constant 0 : i32 loc("{{.*}}":5:11)
// CHECK-NEXT:     %0 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":5:7)
// CHECK-NEXT:     sir.store %c0_i32 : i32 into %0 : !sir.pointer<i32> loc("{{.*}}":5:7)
// CHECK-NEXT:     %1 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":7:4)
// CHECK-NEXT:     %2 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":8:5)
// CHECK-NEXT:     %3 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":9:5)
// CHECK-NEXT:     %4 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":10:7)
// CHECK-NEXT:     %5 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":11:6)
// CHECK-NEXT:     %6 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":12:9)
// CHECK-NEXT:     %c1_i32 = constant 1 : i32 loc("{{.*}}":14:4)
// CHECK-NEXT:     %c1_i32_0 = constant 1 : i32 loc("{{.*}}":15:5)
// CHECK-NEXT:     %c10_i32 = constant 10 : i32 loc("{{.*}}":16:5)
// CHECK-NEXT:     %c10_i32_1 = constant 10 : i32 loc("{{.*}}":17:7)
// CHECK-NEXT:     %c100_i32 = constant 100 : i32 loc("{{.*}}":18:6)
// CHECK-NEXT:     %c100_i32_2 = constant 100 : i32 loc("{{.*}}":19:9)
// CHECK-NEXT:     sir.default_return loc("{{.*}}":20:1)
// CHECK-NEXT:   } loc("{{.*}}":4:6)
// CHECK-NEXT:   func @unaryPlusFlt() {
// CHECK-NEXT:     %cst = constant 1.000000e+00 : f32 loc("{{.*}}":23:11)
// CHECK-NEXT:     %0 = sir.alloc_stack : !sir.pointer<f32> loc("{{.*}}":23:7)
// CHECK-NEXT:     sir.store %cst : f32 into %0 : !sir.pointer<f32> loc("{{.*}}":23:7)
// CHECK-NEXT:     %1 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":25:4)
// CHECK-NEXT:     %2 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":26:5)
// CHECK-NEXT:     %3 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":27:5)
// CHECK-NEXT:     %4 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":28:7)
// CHECK-NEXT:     %5 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":29:6)
// CHECK-NEXT:     %6 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":30:9)
// CHECK-NEXT:     %cst_0 = constant 1.000000e+00 : f32 loc("{{.*}}":32:4)
// CHECK-NEXT:     %cst_1 = constant 1.000000e+00 : f32 loc("{{.*}}":33:5)
// CHECK-NEXT:     %cst_2 = constant 1.000000e+01 : f32 loc("{{.*}}":34:5)
// CHECK-NEXT:     %cst_3 = constant 1.000000e+01 : f32 loc("{{.*}}":35:7)
// CHECK-NEXT:     %cst_4 = constant 1.000000e+02 : f32 loc("{{.*}}":36:6)
// CHECK-NEXT:     %cst_5 = constant 1.000000e+02 : f32 loc("{{.*}}":37:9)
// CHECK-NEXT:     sir.default_return loc("{{.*}}":38:1)
// CHECK-NEXT:   } loc("{{.*}}":22:6)
// CHECK-NEXT: }
