// NOTE: CHECK lines have been generated by utils/update_filecheck_test.py
// RUN: sorac -emit-sirgen -g %s | FileCheck %s

func unaryMinusInt() {
  let y = 0

  -y
  -(y)
  --y
  -(-(y))
  ---y
  -(-(-(y)))
}

func unaryMinusFlt() {
  let y = 1.0

  -y
  -(y)
  --y
  -(-(y))
  ---y
  -(-(-(y)))
}

func unaryLNot() {
  let x = true

  !x
  !(x)
  !!x
  !(!(x))
  !!!x
  !(!(!(x)))
}

func unaryPlusInt() {
  let y = 0

  +y
  +(y)
  ++y
  +(+(y))
  +++y
  +(+(+(y)))
}

func unaryPlusFlt() {
  let y = 1.0

  +y
  +(y)
  ++y
  +(+(y))
  +++y
  +(+(+(y)))
}

// CHECK:      module @"{{.*}}" {
// CHECK-NEXT:   func @unaryMinusInt() {
// CHECK-NEXT:     %c0_i32 = constant 0 : i32 loc("{{.*}}":5:11)
// CHECK-NEXT:     %0 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":5:7)
// CHECK-NEXT:     sir.store %c0_i32 : i32 into %0 : !sir.pointer<i32> loc("{{.*}}":5:7)
// CHECK-NEXT:     %1 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":7:4)
// CHECK-NEXT:     %c0_i32_0 = constant 0 : i32 loc("{{.*}}":7:3)
// CHECK-NEXT:     %2 = subi %c0_i32_0, %1 : i32 loc("{{.*}}":7:3)
// CHECK-NEXT:     %3 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":8:5)
// CHECK-NEXT:     %c0_i32_1 = constant 0 : i32 loc("{{.*}}":8:3)
// CHECK-NEXT:     %4 = subi %c0_i32_1, %3 : i32 loc("{{.*}}":8:3)
// CHECK-NEXT:     %5 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":9:5)
// CHECK-NEXT:     %c0_i32_2 = constant 0 : i32 loc("{{.*}}":9:4)
// CHECK-NEXT:     %6 = subi %c0_i32_2, %5 : i32 loc("{{.*}}":9:4)
// CHECK-NEXT:     %c0_i32_3 = constant 0 : i32 loc("{{.*}}":9:3)
// CHECK-NEXT:     %7 = subi %c0_i32_3, %6 : i32 loc("{{.*}}":9:3)
// CHECK-NEXT:     %8 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":10:7)
// CHECK-NEXT:     %c0_i32_4 = constant 0 : i32 loc("{{.*}}":10:5)
// CHECK-NEXT:     %9 = subi %c0_i32_4, %8 : i32 loc("{{.*}}":10:5)
// CHECK-NEXT:     %c0_i32_5 = constant 0 : i32 loc("{{.*}}":10:3)
// CHECK-NEXT:     %10 = subi %c0_i32_5, %9 : i32 loc("{{.*}}":10:3)
// CHECK-NEXT:     %11 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":11:6)
// CHECK-NEXT:     %c0_i32_6 = constant 0 : i32 loc("{{.*}}":11:5)
// CHECK-NEXT:     %12 = subi %c0_i32_6, %11 : i32 loc("{{.*}}":11:5)
// CHECK-NEXT:     %c0_i32_7 = constant 0 : i32 loc("{{.*}}":11:4)
// CHECK-NEXT:     %13 = subi %c0_i32_7, %12 : i32 loc("{{.*}}":11:4)
// CHECK-NEXT:     %c0_i32_8 = constant 0 : i32 loc("{{.*}}":11:3)
// CHECK-NEXT:     %14 = subi %c0_i32_8, %13 : i32 loc("{{.*}}":11:3)
// CHECK-NEXT:     %15 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":12:9)
// CHECK-NEXT:     %c0_i32_9 = constant 0 : i32 loc("{{.*}}":12:7)
// CHECK-NEXT:     %16 = subi %c0_i32_9, %15 : i32 loc("{{.*}}":12:7)
// CHECK-NEXT:     %c0_i32_10 = constant 0 : i32 loc("{{.*}}":12:5)
// CHECK-NEXT:     %17 = subi %c0_i32_10, %16 : i32 loc("{{.*}}":12:5)
// CHECK-NEXT:     %c0_i32_11 = constant 0 : i32 loc("{{.*}}":12:3)
// CHECK-NEXT:     %18 = subi %c0_i32_11, %17 : i32 loc("{{.*}}":12:3)
// CHECK-NEXT:     sir.default_return loc("{{.*}}":13:1)
// CHECK-NEXT:   } loc("{{.*}}":4:6)
// CHECK-NEXT:   func @unaryMinusFlt() {
// CHECK-NEXT:     %cst = constant 1.000000e+00 : f32 loc("{{.*}}":16:11)
// CHECK-NEXT:     %0 = sir.alloc_stack : !sir.pointer<f32> loc("{{.*}}":16:7)
// CHECK-NEXT:     sir.store %cst : f32 into %0 : !sir.pointer<f32> loc("{{.*}}":16:7)
// CHECK-NEXT:     %1 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":18:4)
// CHECK-NEXT:     %cst_0 = constant 0.000000e+00 : f32 loc("{{.*}}":18:3)
// CHECK-NEXT:     %2 = subf %cst_0, %1 : f32 loc("{{.*}}":18:3)
// CHECK-NEXT:     %3 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":19:5)
// CHECK-NEXT:     %cst_1 = constant 0.000000e+00 : f32 loc("{{.*}}":19:3)
// CHECK-NEXT:     %4 = subf %cst_1, %3 : f32 loc("{{.*}}":19:3)
// CHECK-NEXT:     %5 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":20:5)
// CHECK-NEXT:     %cst_2 = constant 0.000000e+00 : f32 loc("{{.*}}":20:4)
// CHECK-NEXT:     %6 = subf %cst_2, %5 : f32 loc("{{.*}}":20:4)
// CHECK-NEXT:     %cst_3 = constant 0.000000e+00 : f32 loc("{{.*}}":20:3)
// CHECK-NEXT:     %7 = subf %cst_3, %6 : f32 loc("{{.*}}":20:3)
// CHECK-NEXT:     %8 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":21:7)
// CHECK-NEXT:     %cst_4 = constant 0.000000e+00 : f32 loc("{{.*}}":21:5)
// CHECK-NEXT:     %9 = subf %cst_4, %8 : f32 loc("{{.*}}":21:5)
// CHECK-NEXT:     %cst_5 = constant 0.000000e+00 : f32 loc("{{.*}}":21:3)
// CHECK-NEXT:     %10 = subf %cst_5, %9 : f32 loc("{{.*}}":21:3)
// CHECK-NEXT:     %11 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":22:6)
// CHECK-NEXT:     %cst_6 = constant 0.000000e+00 : f32 loc("{{.*}}":22:5)
// CHECK-NEXT:     %12 = subf %cst_6, %11 : f32 loc("{{.*}}":22:5)
// CHECK-NEXT:     %cst_7 = constant 0.000000e+00 : f32 loc("{{.*}}":22:4)
// CHECK-NEXT:     %13 = subf %cst_7, %12 : f32 loc("{{.*}}":22:4)
// CHECK-NEXT:     %cst_8 = constant 0.000000e+00 : f32 loc("{{.*}}":22:3)
// CHECK-NEXT:     %14 = subf %cst_8, %13 : f32 loc("{{.*}}":22:3)
// CHECK-NEXT:     %15 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":23:9)
// CHECK-NEXT:     %cst_9 = constant 0.000000e+00 : f32 loc("{{.*}}":23:7)
// CHECK-NEXT:     %16 = subf %cst_9, %15 : f32 loc("{{.*}}":23:7)
// CHECK-NEXT:     %cst_10 = constant 0.000000e+00 : f32 loc("{{.*}}":23:5)
// CHECK-NEXT:     %17 = subf %cst_10, %16 : f32 loc("{{.*}}":23:5)
// CHECK-NEXT:     %cst_11 = constant 0.000000e+00 : f32 loc("{{.*}}":23:3)
// CHECK-NEXT:     %18 = subf %cst_11, %17 : f32 loc("{{.*}}":23:3)
// CHECK-NEXT:     sir.default_return loc("{{.*}}":24:1)
// CHECK-NEXT:   } loc("{{.*}}":15:6)
// CHECK-NEXT:   func @unaryLNot() {
// CHECK-NEXT:     %true = constant 1 : i1 loc("{{.*}}":27:11)
// CHECK-NEXT:     %0 = sir.alloc_stack : !sir.pointer<i1> loc("{{.*}}":27:7)
// CHECK-NEXT:     sir.store %true : i1 into %0 : !sir.pointer<i1> loc("{{.*}}":27:7)
// CHECK-NEXT:     %1 = sir.load %0 : (!sir.pointer<i1>) -> i1 loc("{{.*}}":29:4)
// CHECK-NEXT:     %true_0 = constant 1 : i1 loc("{{.*}}":29:3)
// CHECK-NEXT:     %2 = xor %1, %true_0 : i1 loc("{{.*}}":29:3)
// CHECK-NEXT:     %3 = sir.load %0 : (!sir.pointer<i1>) -> i1 loc("{{.*}}":30:5)
// CHECK-NEXT:     %true_1 = constant 1 : i1 loc("{{.*}}":30:3)
// CHECK-NEXT:     %4 = xor %3, %true_1 : i1 loc("{{.*}}":30:3)
// CHECK-NEXT:     %5 = sir.load %0 : (!sir.pointer<i1>) -> i1 loc("{{.*}}":31:5)
// CHECK-NEXT:     %true_2 = constant 1 : i1 loc("{{.*}}":31:4)
// CHECK-NEXT:     %6 = xor %5, %true_2 : i1 loc("{{.*}}":31:4)
// CHECK-NEXT:     %true_3 = constant 1 : i1 loc("{{.*}}":31:3)
// CHECK-NEXT:     %7 = xor %6, %true_3 : i1 loc("{{.*}}":31:3)
// CHECK-NEXT:     %8 = sir.load %0 : (!sir.pointer<i1>) -> i1 loc("{{.*}}":32:7)
// CHECK-NEXT:     %true_4 = constant 1 : i1 loc("{{.*}}":32:5)
// CHECK-NEXT:     %9 = xor %8, %true_4 : i1 loc("{{.*}}":32:5)
// CHECK-NEXT:     %true_5 = constant 1 : i1 loc("{{.*}}":32:3)
// CHECK-NEXT:     %10 = xor %9, %true_5 : i1 loc("{{.*}}":32:3)
// CHECK-NEXT:     %11 = sir.load %0 : (!sir.pointer<i1>) -> i1 loc("{{.*}}":33:6)
// CHECK-NEXT:     %true_6 = constant 1 : i1 loc("{{.*}}":33:5)
// CHECK-NEXT:     %12 = xor %11, %true_6 : i1 loc("{{.*}}":33:5)
// CHECK-NEXT:     %true_7 = constant 1 : i1 loc("{{.*}}":33:4)
// CHECK-NEXT:     %13 = xor %12, %true_7 : i1 loc("{{.*}}":33:4)
// CHECK-NEXT:     %true_8 = constant 1 : i1 loc("{{.*}}":33:3)
// CHECK-NEXT:     %14 = xor %13, %true_8 : i1 loc("{{.*}}":33:3)
// CHECK-NEXT:     %15 = sir.load %0 : (!sir.pointer<i1>) -> i1 loc("{{.*}}":34:9)
// CHECK-NEXT:     %true_9 = constant 1 : i1 loc("{{.*}}":34:7)
// CHECK-NEXT:     %16 = xor %15, %true_9 : i1 loc("{{.*}}":34:7)
// CHECK-NEXT:     %true_10 = constant 1 : i1 loc("{{.*}}":34:5)
// CHECK-NEXT:     %17 = xor %16, %true_10 : i1 loc("{{.*}}":34:5)
// CHECK-NEXT:     %true_11 = constant 1 : i1 loc("{{.*}}":34:3)
// CHECK-NEXT:     %18 = xor %17, %true_11 : i1 loc("{{.*}}":34:3)
// CHECK-NEXT:     sir.default_return loc("{{.*}}":35:1)
// CHECK-NEXT:   } loc("{{.*}}":26:6)
// CHECK-NEXT:   func @unaryPlusInt() {
// CHECK-NEXT:     %c0_i32 = constant 0 : i32 loc("{{.*}}":38:11)
// CHECK-NEXT:     %0 = sir.alloc_stack : !sir.pointer<i32> loc("{{.*}}":38:7)
// CHECK-NEXT:     sir.store %c0_i32 : i32 into %0 : !sir.pointer<i32> loc("{{.*}}":38:7)
// CHECK-NEXT:     %1 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":40:4)
// CHECK-NEXT:     %2 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":41:5)
// CHECK-NEXT:     %3 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":42:5)
// CHECK-NEXT:     %4 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":43:7)
// CHECK-NEXT:     %5 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":44:6)
// CHECK-NEXT:     %6 = sir.load %0 : (!sir.pointer<i32>) -> i32 loc("{{.*}}":45:9)
// CHECK-NEXT:     sir.default_return loc("{{.*}}":46:1)
// CHECK-NEXT:   } loc("{{.*}}":37:6)
// CHECK-NEXT:   func @unaryPlusFlt() {
// CHECK-NEXT:     %cst = constant 1.000000e+00 : f32 loc("{{.*}}":49:11)
// CHECK-NEXT:     %0 = sir.alloc_stack : !sir.pointer<f32> loc("{{.*}}":49:7)
// CHECK-NEXT:     sir.store %cst : f32 into %0 : !sir.pointer<f32> loc("{{.*}}":49:7)
// CHECK-NEXT:     %1 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":51:4)
// CHECK-NEXT:     %2 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":52:5)
// CHECK-NEXT:     %3 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":53:5)
// CHECK-NEXT:     %4 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":54:7)
// CHECK-NEXT:     %5 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":55:6)
// CHECK-NEXT:     %6 = sir.load %0 : (!sir.pointer<f32>) -> f32 loc("{{.*}}":56:9)
// CHECK-NEXT:     sir.default_return loc("{{.*}}":57:1)
// CHECK-NEXT:   } loc("{{.*}}":48:6)
// CHECK-NEXT: }
