// NOTE: CHECK lines have been generated by utils/update_filecheck_test.py
// RUN: sorac -emit-sirgen -g %s | FileCheck %s

func foo() {
  let mut (a: u8, b: bool, c: (u8, i8)) = (0, false, (2, 3))

  _ = *&a
  _ = *&b
  _ = *&c

  let r_a: &mut u8 = &a
  let r_b: &mut bool = &b
  let r_c: &mut (u8, i8) = &c

  _ = *r_a
  _ = *r_b
  _ = *r_c
}

// CHECK:      module @"{{.*}}" {
// CHECK-NEXT:   func @foo() {
// CHECK-NEXT:     %c0_i8 = constant 0 : i8 loc("{{.*}}":5:44)
// CHECK-NEXT:     %false = constant 0 : i1 loc("{{.*}}":5:47)
// CHECK-NEXT:     %c2_i8 = constant 2 : i8 loc("{{.*}}":5:55)
// CHECK-NEXT:     %c3_i8 = constant 3 : i8 loc("{{.*}}":5:58)
// CHECK-NEXT:     %0 = sir.create_tuple(%c2_i8, %c3_i8 : i8, i8) -> tuple<i8, i8> loc("{{.*}}":5:54)
// CHECK-NEXT:     %1 = sir.create_tuple(%c0_i8, %false, %0 : i8, i1, tuple<i8, i8>) -> tuple<i8, i1, tuple<i8, i8>> loc("{{.*}}":5:43)
// CHECK-NEXT:     %2:3 = sir.destructure_tuple %1 : (tuple<i8, i1, tuple<i8, i8>>) -> (i8, i1, tuple<i8, i8>) loc("{{.*}}":5:11)
// CHECK-NEXT:     %3 = sir.alloc_stack : !sir.pointer<i8> loc("{{.*}}":5:12)
// CHECK-NEXT:     sir.store %2#0 : i8 into %3 : !sir.pointer<i8> loc("{{.*}}":5:12)
// CHECK-NEXT:     %4 = sir.alloc_stack : !sir.pointer<i1> loc("{{.*}}":5:19)
// CHECK-NEXT:     sir.store %2#1 : i1 into %4 : !sir.pointer<i1> loc("{{.*}}":5:19)
// CHECK-NEXT:     %5 = sir.alloc_stack : !sir.pointer<tuple<i8, i8>> loc("{{.*}}":5:28)
// CHECK-NEXT:     sir.store %2#2 : tuple<i8, i8> into %5 : !sir.pointer<tuple<i8, i8>> loc("{{.*}}":5:28)
// CHECK-NEXT:     %6 = sir.static_cast %3 : !sir.pointer<i8> to !sir.reference<i8> loc("{{.*}}":7:8)
// CHECK-NEXT:     %7 = sir.static_cast %6 : !sir.reference<i8> to !sir.pointer<i8> loc("{{.*}}":7:7)
// CHECK-NEXT:     %8 = sir.load %7 : (!sir.pointer<i8>) -> i8 loc("{{.*}}":7:7)
// CHECK-NEXT:     %9 = sir.static_cast %4 : !sir.pointer<i1> to !sir.reference<i1> loc("{{.*}}":8:8)
// CHECK-NEXT:     %10 = sir.static_cast %9 : !sir.reference<i1> to !sir.pointer<i1> loc("{{.*}}":8:7)
// CHECK-NEXT:     %11 = sir.load %10 : (!sir.pointer<i1>) -> i1 loc("{{.*}}":8:7)
// CHECK-NEXT:     %12 = sir.static_cast %5 : !sir.pointer<tuple<i8, i8>> to !sir.reference<tuple<i8, i8>> loc("{{.*}}":9:8)
// CHECK-NEXT:     %13 = sir.static_cast %12 : !sir.reference<tuple<i8, i8>> to !sir.pointer<tuple<i8, i8>> loc("{{.*}}":9:7)
// CHECK-NEXT:     %14 = sir.load %13 : (!sir.pointer<tuple<i8, i8>>) -> tuple<i8, i8> loc("{{.*}}":9:7)
// CHECK-NEXT:     %15 = sir.static_cast %3 : !sir.pointer<i8> to !sir.reference<i8> loc("{{.*}}":11:22)
// CHECK-NEXT:     %16 = sir.alloc_stack : !sir.pointer<!sir.reference<i8>> loc("{{.*}}":11:7)
// CHECK-NEXT:     sir.store %15 : !sir.reference<i8> into %16 : !sir.pointer<!sir.reference<i8>> loc("{{.*}}":11:7)
// CHECK-NEXT:     %17 = sir.static_cast %4 : !sir.pointer<i1> to !sir.reference<i1> loc("{{.*}}":12:24)
// CHECK-NEXT:     %18 = sir.alloc_stack : !sir.pointer<!sir.reference<i1>> loc("{{.*}}":12:7)
// CHECK-NEXT:     sir.store %17 : !sir.reference<i1> into %18 : !sir.pointer<!sir.reference<i1>> loc("{{.*}}":12:7)
// CHECK-NEXT:     %19 = sir.static_cast %5 : !sir.pointer<tuple<i8, i8>> to !sir.reference<tuple<i8, i8>> loc("{{.*}}":13:28)
// CHECK-NEXT:     %20 = sir.alloc_stack : !sir.pointer<!sir.reference<tuple<i8, i8>>> loc("{{.*}}":13:7)
// CHECK-NEXT:     sir.store %19 : !sir.reference<tuple<i8, i8>> into %20 : !sir.pointer<!sir.reference<tuple<i8, i8>>> loc("{{.*}}":13:7)
// CHECK-NEXT:     %21 = sir.load %16 : (!sir.pointer<!sir.reference<i8>>) -> !sir.reference<i8> loc("{{.*}}":15:8)
// CHECK-NEXT:     %22 = sir.static_cast %21 : !sir.reference<i8> to !sir.pointer<i8> loc("{{.*}}":15:7)
// CHECK-NEXT:     %23 = sir.load %22 : (!sir.pointer<i8>) -> i8 loc("{{.*}}":15:7)
// CHECK-NEXT:     %24 = sir.load %18 : (!sir.pointer<!sir.reference<i1>>) -> !sir.reference<i1> loc("{{.*}}":16:8)
// CHECK-NEXT:     %25 = sir.static_cast %24 : !sir.reference<i1> to !sir.pointer<i1> loc("{{.*}}":16:7)
// CHECK-NEXT:     %26 = sir.load %25 : (!sir.pointer<i1>) -> i1 loc("{{.*}}":16:7)
// CHECK-NEXT:     %27 = sir.load %20 : (!sir.pointer<!sir.reference<tuple<i8, i8>>>) -> !sir.reference<tuple<i8, i8>> loc("{{.*}}":17:8)
// CHECK-NEXT:     %28 = sir.static_cast %27 : !sir.reference<tuple<i8, i8>> to !sir.pointer<tuple<i8, i8>> loc("{{.*}}":17:7)
// CHECK-NEXT:     %29 = sir.load %28 : (!sir.pointer<tuple<i8, i8>>) -> tuple<i8, i8> loc("{{.*}}":17:7)
// CHECK-NEXT:     sir.default_return loc("{{.*}}":18:1)
// CHECK-NEXT:   } loc("{{.*}}":4:6)
// CHECK-NEXT: }
