// NOTE: CHECK lines have been generated by utils/update_filecheck_test.py
// RUN: sorac -parse-only -dump-parse %s | FileCheck %s

// @TEST_PATTERN .*Expr

func exprs() {
  _ = 1+2 += 3*4 -= _ *= 2 | 3 /= d >>= true == false <<= false ^= a%b %= b
  a &= b ^= c ??= d
  0 as i32
  0 as i32 as i64
  0 as &mut (i32, i32)
  3+2-1*2/3%4<<5>>6&7|8^9==10!=11<12<=13>14>=15&&16||17??18
  0 ? 0 : 0
  0 ? a = b : 0
  bar!
  foo->0
  foo.bar.0->bux
  foo(1, 2)
  foo()!
  foo().0()->a()!

  // This isn't a call
  foo
  ()

  +0 + +0 & -0 | !0 & ~0 & &0
  _ = null = _ = 0.0 = _ = false = true

  // not a tuple
  (0)

  (0, 1, 2)
  ((0, 1, 2), (0, 1, 2), (0, 1, (0, 1, 2)))
}

// CHECK:            BinaryExpr type=<null_type> = (Assign) opLoc=line:7:5
// CHECK-NEXT:         DiscardExpr type=<null_type> loc=line:7:3
// CHECK-NEXT:         BinaryExpr type=<null_type> += (AddAssign) opLoc=line:7:11
// CHECK-NEXT:           BinaryExpr type=<null_type> + (Add) opLoc=line:7:8
// CHECK-NEXT:             IntegerLiteralExpr type=<null_type> loc=line:7:7 str='1'
// CHECK-NEXT:             IntegerLiteralExpr type=<null_type> loc=line:7:9 str='2'
// CHECK-NEXT:           BinaryExpr type=<null_type> -= (SubAssign) opLoc=line:7:18
// CHECK-NEXT:             BinaryExpr type=<null_type> * (Mul) opLoc=line:7:15
// CHECK-NEXT:               IntegerLiteralExpr type=<null_type> loc=line:7:14 str='3'
// CHECK-NEXT:               IntegerLiteralExpr type=<null_type> loc=line:7:16 str='4'
// CHECK-NEXT:             BinaryExpr type=<null_type> *= (MulAssign) opLoc=line:7:23
// CHECK-NEXT:               DiscardExpr type=<null_type> loc=line:7:21
// CHECK-NEXT:               BinaryExpr type=<null_type> /= (DivAssign) opLoc=line:7:32
// CHECK-NEXT:                 BinaryExpr type=<null_type> | (Or) opLoc=line:7:28
// CHECK-NEXT:                   IntegerLiteralExpr type=<null_type> loc=line:7:26 str='2'
// CHECK-NEXT:                   IntegerLiteralExpr type=<null_type> loc=line:7:30 str='3'
// CHECK-NEXT:                 BinaryExpr type=<null_type> >>= (ShrAssign) opLoc=line:7:37
// CHECK-NEXT:                   UnresolvedDeclRefExpr type=<null_type> identifier=d loc=line:7:35
// CHECK-NEXT:                   BinaryExpr type=<null_type> <<= (ShlAssign) opLoc=line:7:55
// CHECK-NEXT:                     BinaryExpr type=<null_type> == (Eq) opLoc=line:7:46
// CHECK-NEXT:                       BooleanLiteralExpr type=<null_type> loc=line:7:41 value=true
// CHECK-NEXT:                       BooleanLiteralExpr type=<null_type> loc=line:7:49 value=false
// CHECK-NEXT:                     BinaryExpr type=<null_type> ^= (XOrAssign) opLoc=line:7:65
// CHECK-NEXT:                       BooleanLiteralExpr type=<null_type> loc=line:7:59 value=false
// CHECK-NEXT:                       BinaryExpr type=<null_type> %= (RemAssign) opLoc=line:7:72
// CHECK-NEXT:                         BinaryExpr type=<null_type> % (Rem) opLoc=line:7:69
// CHECK-NEXT:                           UnresolvedDeclRefExpr type=<null_type> identifier=a loc=line:7:68
// CHECK-NEXT:                           UnresolvedDeclRefExpr type=<null_type> identifier=b loc=line:7:70
// CHECK-NEXT:                         UnresolvedDeclRefExpr type=<null_type> identifier=b loc=line:7:75
// CHECK-NEXT:       BinaryExpr type=<null_type> &= (AndAssign) opLoc=line:8:5
// CHECK-NEXT:         UnresolvedDeclRefExpr type=<null_type> identifier=a loc=line:8:3
// CHECK-NEXT:         BinaryExpr type=<null_type> ^= (XOrAssign) opLoc=line:8:10
// CHECK-NEXT:           UnresolvedDeclRefExpr type=<null_type> identifier=b loc=line:8:8
// CHECK-NEXT:           BinaryExpr type=<null_type> ??= (NullCoalesceAssign) opLoc=line:8:15
// CHECK-NEXT:             UnresolvedDeclRefExpr type=<null_type> identifier=c loc=line:8:13
// CHECK-NEXT:             UnresolvedDeclRefExpr type=<null_type> identifier=d loc=line:8:19
// CHECK-NEXT:       CastExpr type=<null_type> asLoc=line:9:5
// CHECK-NEXT:         IntegerLiteralExpr type=<null_type> loc=line:9:3 str='0'
// CHECK:            CastExpr type=<null_type> asLoc=line:10:12
// CHECK-NEXT:         CastExpr type=<null_type> asLoc=line:10:5
// CHECK-NEXT:           IntegerLiteralExpr type=<null_type> loc=line:10:3 str='0'
// CHECK:            CastExpr type=<null_type> asLoc=line:11:5
// CHECK-NEXT:         IntegerLiteralExpr type=<null_type> loc=line:11:3 str='0'
// CHECK:            BinaryExpr type=<null_type> ?? (NullCoalesce) opLoc=line:12:56
// CHECK-NEXT:         BinaryExpr type=<null_type> || (LOr) opLoc=line:12:52
// CHECK-NEXT:           BinaryExpr type=<null_type> && (LAnd) opLoc=line:12:48
// CHECK-NEXT:             BinaryExpr type=<null_type> >= (GE) opLoc=line:12:44
// CHECK-NEXT:               BinaryExpr type=<null_type> > (GT) opLoc=line:12:41
// CHECK-NEXT:                 BinaryExpr type=<null_type> <= (LE) opLoc=line:12:37
// CHECK-NEXT:                   BinaryExpr type=<null_type> < (LT) opLoc=line:12:34
// CHECK-NEXT:                     BinaryExpr type=<null_type> != (NEq) opLoc=line:12:30
// CHECK-NEXT:                       BinaryExpr type=<null_type> == (Eq) opLoc=line:12:26
// CHECK-NEXT:                         BinaryExpr type=<null_type> - (Sub) opLoc=line:12:6
// CHECK-NEXT:                           BinaryExpr type=<null_type> + (Add) opLoc=line:12:4
// CHECK-NEXT:                             IntegerLiteralExpr type=<null_type> loc=line:12:3 str='3'
// CHECK-NEXT:                             IntegerLiteralExpr type=<null_type> loc=line:12:5 str='2'
// CHECK-NEXT:                           BinaryExpr type=<null_type> ^ (XOr) opLoc=line:12:24
// CHECK-NEXT:                             BinaryExpr type=<null_type> | (Or) opLoc=line:12:22
// CHECK-NEXT:                               BinaryExpr type=<null_type> & (And) opLoc=line:12:20
// CHECK-NEXT:                                 BinaryExpr type=<null_type> >> (Shr) opLoc=line:12:17
// CHECK-NEXT:                                   BinaryExpr type=<null_type> << (Shl) opLoc=line:12:14
// CHECK-NEXT:                                     BinaryExpr type=<null_type> % (Rem) opLoc=line:12:12
// CHECK-NEXT:                                       BinaryExpr type=<null_type> / (Div) opLoc=line:12:10
// CHECK-NEXT:                                         BinaryExpr type=<null_type> * (Mul) opLoc=line:12:8
// CHECK-NEXT:                                           IntegerLiteralExpr type=<null_type> loc=line:12:7 str='1'
// CHECK-NEXT:                                           IntegerLiteralExpr type=<null_type> loc=line:12:9 str='2'
// CHECK-NEXT:                                         IntegerLiteralExpr type=<null_type> loc=line:12:11 str='3'
// CHECK-NEXT:                                       IntegerLiteralExpr type=<null_type> loc=line:12:13 str='4'
// CHECK-NEXT:                                     IntegerLiteralExpr type=<null_type> loc=line:12:16 str='5'
// CHECK-NEXT:                                   IntegerLiteralExpr type=<null_type> loc=line:12:19 str='6'
// CHECK-NEXT:                                 IntegerLiteralExpr type=<null_type> loc=line:12:21 str='7'
// CHECK-NEXT:                               IntegerLiteralExpr type=<null_type> loc=line:12:23 str='8'
// CHECK-NEXT:                             IntegerLiteralExpr type=<null_type> loc=line:12:25 str='9'
// CHECK-NEXT:                         IntegerLiteralExpr type=<null_type> loc=line:12:28 str='10'
// CHECK-NEXT:                       IntegerLiteralExpr type=<null_type> loc=line:12:32 str='11'
// CHECK-NEXT:                     IntegerLiteralExpr type=<null_type> loc=line:12:35 str='12'
// CHECK-NEXT:                   IntegerLiteralExpr type=<null_type> loc=line:12:39 str='13'
// CHECK-NEXT:                 IntegerLiteralExpr type=<null_type> loc=line:12:42 str='14'
// CHECK-NEXT:               IntegerLiteralExpr type=<null_type> loc=line:12:46 str='15'
// CHECK-NEXT:             IntegerLiteralExpr type=<null_type> loc=line:12:50 str='16'
// CHECK-NEXT:           IntegerLiteralExpr type=<null_type> loc=line:12:54 str='17'
// CHECK-NEXT:         IntegerLiteralExpr type=<null_type> loc=line:12:58 str='18'
// CHECK-NEXT:       ConditionalExpr type=<null_type> questionLoc=line:13:5 colonLoc=line:13:9
// CHECK-NEXT:         IntegerLiteralExpr type=<null_type> loc=line:13:3 str='0'
// CHECK-NEXT:         IntegerLiteralExpr type=<null_type> loc=line:13:7 str='0'
// CHECK-NEXT:         IntegerLiteralExpr type=<null_type> loc=line:13:11 str='0'
// CHECK-NEXT:       ConditionalExpr type=<null_type> questionLoc=line:14:5 colonLoc=line:14:13
// CHECK-NEXT:         IntegerLiteralExpr type=<null_type> loc=line:14:3 str='0'
// CHECK-NEXT:         BinaryExpr type=<null_type> = (Assign) opLoc=line:14:9
// CHECK-NEXT:           UnresolvedDeclRefExpr type=<null_type> identifier=a loc=line:14:7
// CHECK-NEXT:           UnresolvedDeclRefExpr type=<null_type> identifier=b loc=line:14:11
// CHECK-NEXT:         IntegerLiteralExpr type=<null_type> loc=line:14:15 str='0'
// CHECK-NEXT:       ForceUnwrapExpr type=<null_type> exclaimLoc=line:15:6
// CHECK-NEXT:         UnresolvedDeclRefExpr type=<null_type> identifier=bar loc=line:15:3
// CHECK-NEXT:       UnresolvedMemberRefExpr type=<null_type> arrow memberIdent=0 memberIdentLoc=line:16:8
// CHECK-NEXT:         UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:16:3
// CHECK-NEXT:       UnresolvedMemberRefExpr type=<null_type> arrow memberIdent=bux memberIdentLoc=line:17:14
// CHECK-NEXT:         UnresolvedMemberRefExpr type=<null_type> dot memberIdent=0 memberIdentLoc=line:17:11
// CHECK-NEXT:           UnresolvedMemberRefExpr type=<null_type> dot memberIdent=bar memberIdentLoc=line:17:7
// CHECK-NEXT:             UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:17:3
// CHECK-NEXT:       CallExpr type=<null_type> lParenLoc=line:18:6 rParenLoc=line:18:11 numArgs=2
// CHECK-NEXT:         UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:18:3
// CHECK-NEXT:         IntegerLiteralExpr type=<null_type> loc=line:18:7 str='1'
// CHECK-NEXT:         IntegerLiteralExpr type=<null_type> loc=line:18:10 str='2'
// CHECK-NEXT:       ForceUnwrapExpr type=<null_type> exclaimLoc=line:19:8
// CHECK-NEXT:         CallExpr type=<null_type> lParenLoc=line:19:6 rParenLoc=line:19:7 numArgs=0
// CHECK-NEXT:           UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:19:3
// CHECK-NEXT:       ForceUnwrapExpr type=<null_type> exclaimLoc=line:20:17
// CHECK-NEXT:         CallExpr type=<null_type> lParenLoc=line:20:15 rParenLoc=line:20:16 numArgs=0
// CHECK-NEXT:           UnresolvedMemberRefExpr type=<null_type> arrow memberIdent=a memberIdentLoc=line:20:14
// CHECK-NEXT:             CallExpr type=<null_type> lParenLoc=line:20:10 rParenLoc=line:20:11 numArgs=0
// CHECK-NEXT:               UnresolvedMemberRefExpr type=<null_type> dot memberIdent=0 memberIdentLoc=line:20:9
// CHECK-NEXT:                 CallExpr type=<null_type> lParenLoc=line:20:6 rParenLoc=line:20:7 numArgs=0
// CHECK-NEXT:                   UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:20:3
// CHECK-NEXT:       UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:23:3
// CHECK-NEXT:       TupleExpr type=<null_type> numElements=0 lParenLoc=line:24:3 rParenLoc=line:24:4
// CHECK-NEXT:       BinaryExpr type=<null_type> + (Add) opLoc=line:26:6
// CHECK-NEXT:         UnaryExpr type=<null_type> + (Plus) opLoc=line:26:3
// CHECK-NEXT:           IntegerLiteralExpr type=<null_type> loc=line:26:4 str='0'
// CHECK-NEXT:         BinaryExpr type=<null_type> & (And) opLoc=line:26:26
// CHECK-NEXT:           BinaryExpr type=<null_type> & (And) opLoc=line:26:21
// CHECK-NEXT:             BinaryExpr type=<null_type> | (Or) opLoc=line:26:16
// CHECK-NEXT:               BinaryExpr type=<null_type> & (And) opLoc=line:26:11
// CHECK-NEXT:                 UnaryExpr type=<null_type> + (Plus) opLoc=line:26:8
// CHECK-NEXT:                   IntegerLiteralExpr type=<null_type> loc=line:26:9 str='0'
// CHECK-NEXT:                 UnaryExpr type=<null_type> - (Minus) opLoc=line:26:13
// CHECK-NEXT:                   IntegerLiteralExpr type=<null_type> loc=line:26:14 str='0'
// CHECK-NEXT:               UnaryExpr type=<null_type> ! (LNot) opLoc=line:26:18
// CHECK-NEXT:                 IntegerLiteralExpr type=<null_type> loc=line:26:19 str='0'
// CHECK-NEXT:             UnaryExpr type=<null_type> ~ (Not) opLoc=line:26:23
// CHECK-NEXT:               IntegerLiteralExpr type=<null_type> loc=line:26:24 str='0'
// CHECK-NEXT:           UnaryExpr type=<null_type> & (AddressOf) opLoc=line:26:28
// CHECK-NEXT:             IntegerLiteralExpr type=<null_type> loc=line:26:29 str='0'
// CHECK-NEXT:       BinaryExpr type=<null_type> = (Assign) opLoc=line:27:5
// CHECK-NEXT:         DiscardExpr type=<null_type> loc=line:27:3
// CHECK-NEXT:         BinaryExpr type=<null_type> = (Assign) opLoc=line:27:12
// CHECK-NEXT:           NullLiteralExpr type=<null_type> loc=line:27:7
// CHECK-NEXT:           BinaryExpr type=<null_type> = (Assign) opLoc=line:27:16
// CHECK-NEXT:             DiscardExpr type=<null_type> loc=line:27:14
// CHECK-NEXT:             BinaryExpr type=<null_type> = (Assign) opLoc=line:27:22
// CHECK-NEXT:               FloatLiteralExpr type=<null_type> loc=line:27:18 str='0.0'
// CHECK-NEXT:               BinaryExpr type=<null_type> = (Assign) opLoc=line:27:26
// CHECK-NEXT:                 DiscardExpr type=<null_type> loc=line:27:24
// CHECK-NEXT:                 BinaryExpr type=<null_type> = (Assign) opLoc=line:27:34
// CHECK-NEXT:                   BooleanLiteralExpr type=<null_type> loc=line:27:28 value=false
// CHECK-NEXT:                   BooleanLiteralExpr type=<null_type> loc=line:27:36 value=true
// CHECK-NEXT:       ParenExpr type=<null_type> lParenLoc=line:30:3 rParenLoc=line:30:5
// CHECK-NEXT:         IntegerLiteralExpr type=<null_type> loc=line:30:4 str='0'
// CHECK-NEXT:       TupleExpr type=<null_type> numElements=3 lParenLoc=line:32:3 rParenLoc=line:32:11
// CHECK-NEXT:         IntegerLiteralExpr type=<null_type> loc=line:32:4 str='0'
// CHECK-NEXT:         IntegerLiteralExpr type=<null_type> loc=line:32:7 str='1'
// CHECK-NEXT:         IntegerLiteralExpr type=<null_type> loc=line:32:10 str='2'
// CHECK-NEXT:       TupleExpr type=<null_type> numElements=3 lParenLoc=line:33:3 rParenLoc=line:33:43
// CHECK-NEXT:         TupleExpr type=<null_type> numElements=3 lParenLoc=line:33:4 rParenLoc=line:33:12
// CHECK-NEXT:           IntegerLiteralExpr type=<null_type> loc=line:33:5 str='0'
// CHECK-NEXT:           IntegerLiteralExpr type=<null_type> loc=line:33:8 str='1'
// CHECK-NEXT:           IntegerLiteralExpr type=<null_type> loc=line:33:11 str='2'
// CHECK-NEXT:         TupleExpr type=<null_type> numElements=3 lParenLoc=line:33:15 rParenLoc=line:33:23
// CHECK-NEXT:           IntegerLiteralExpr type=<null_type> loc=line:33:16 str='0'
// CHECK-NEXT:           IntegerLiteralExpr type=<null_type> loc=line:33:19 str='1'
// CHECK-NEXT:           IntegerLiteralExpr type=<null_type> loc=line:33:22 str='2'
// CHECK-NEXT:         TupleExpr type=<null_type> numElements=3 lParenLoc=line:33:26 rParenLoc=line:33:42
// CHECK-NEXT:           IntegerLiteralExpr type=<null_type> loc=line:33:27 str='0'
// CHECK-NEXT:           IntegerLiteralExpr type=<null_type> loc=line:33:30 str='1'
// CHECK-NEXT:           TupleExpr type=<null_type> numElements=3 lParenLoc=line:33:33 rParenLoc=line:33:41
// CHECK-NEXT:             IntegerLiteralExpr type=<null_type> loc=line:33:34 str='0'
// CHECK-NEXT:             IntegerLiteralExpr type=<null_type> loc=line:33:37 str='1'
// CHECK-NEXT:             IntegerLiteralExpr type=<null_type> loc=line:33:40 str='2'
