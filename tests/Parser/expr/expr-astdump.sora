// NOTE: CHECK lines have been generated by utils/update_filecheck_test.py
// RUN: sorac -parse-only -dump-parse %s | FileCheck %s

func exprs() {
  _ = 1+2 += 3*4 -= _ *= 2 | 3 /= d >>= true == false <<= false ^= a%b %= b
  a &= b ^= c ??= d
  0 as i32
  0 as i32 as i64
  0 as &mut (i32, i32)
  3+2-1*2/3%4<<5>>6&7|8^9==10!=11<12<=13>14>=15&&16||17??18
  0 ? 0 : 0
  0 ? a = b : 0
  bar!
  foo->0
  foo.bar.0->bux
  foo(1, 2)
  foo()!
  foo().0()->a()!

  // This isn't a call
  foo
  ()

  +0 + +0 & -0 | !0 & ~0 & &0
  _ = null = _ = 0.0 = _ = false = true

  // not a tuple
  (0)

  (0, 1, 2)
  ((0, 1, 2), (0, 1, 2), (0, 1, (0, 1, 2)))
}

// CHECK:      SourceFile numMembers=1
// CHECK:         FuncDecl type=<null_type> identifier=exprs identifierLoc=line:4:6 fnLoc=line:4:1
// CHECK:          ParamList numElements=0 lParenLoc=line:4:11 rParenLoc=line:4:12
// CHECK:          BlockStmt numElement=21 leftCurlyLoc=line:4:14 rightCurlyLoc=line:32:1
// CHECK:            BinaryExpr type=<null_type> = (Assign) opLoc=line:5:5
// CHECK:              DiscardExpr type=<null_type> loc=line:5:3
// CHECK:              BinaryExpr type=<null_type> += (AddAssign) opLoc=line:5:11
// CHECK:                BinaryExpr type=<null_type> + (Add) opLoc=line:5:8
// CHECK:                  IntegerLiteralExpr type=<null_type> loc=line:5:7 str='1'
// CHECK:                  IntegerLiteralExpr type=<null_type> loc=line:5:9 str='2'
// CHECK:                BinaryExpr type=<null_type> -= (SubAssign) opLoc=line:5:18
// CHECK:                  BinaryExpr type=<null_type> * (Mul) opLoc=line:5:15
// CHECK:                    IntegerLiteralExpr type=<null_type> loc=line:5:14 str='3'
// CHECK:                    IntegerLiteralExpr type=<null_type> loc=line:5:16 str='4'
// CHECK:                  BinaryExpr type=<null_type> *= (MulAssign) opLoc=line:5:23
// CHECK:                    DiscardExpr type=<null_type> loc=line:5:21
// CHECK:                    BinaryExpr type=<null_type> /= (DivAssign) opLoc=line:5:32
// CHECK:                      BinaryExpr type=<null_type> | (Or) opLoc=line:5:28
// CHECK:                        IntegerLiteralExpr type=<null_type> loc=line:5:26 str='2'
// CHECK:                        IntegerLiteralExpr type=<null_type> loc=line:5:30 str='3'
// CHECK:                      BinaryExpr type=<null_type> >>= (ShrAssign) opLoc=line:5:37
// CHECK:                        UnresolvedDeclRefExpr type=<null_type> identifier=d loc=line:5:35
// CHECK:                        BinaryExpr type=<null_type> <<= (ShlAssign) opLoc=line:5:55
// CHECK:                          BinaryExpr type=<null_type> == (Eq) opLoc=line:5:46
// CHECK:                            BooleanLiteralExpr type=<null_type> loc=line:5:41 value=true
// CHECK:                            BooleanLiteralExpr type=<null_type> loc=line:5:49 value=false
// CHECK:                          BinaryExpr type=<null_type> ^= (XOrAssign) opLoc=line:5:65
// CHECK:                            BooleanLiteralExpr type=<null_type> loc=line:5:59 value=false
// CHECK:                            BinaryExpr type=<null_type> %= (RemAssign) opLoc=line:5:72
// CHECK:                              BinaryExpr type=<null_type> % (Rem) opLoc=line:5:69
// CHECK:                                UnresolvedDeclRefExpr type=<null_type> identifier=a loc=line:5:68
// CHECK:                                UnresolvedDeclRefExpr type=<null_type> identifier=b loc=line:5:70
// CHECK:                              UnresolvedDeclRefExpr type=<null_type> identifier=b loc=line:5:75
// CHECK:            BinaryExpr type=<null_type> &= (AndAssign) opLoc=line:6:5
// CHECK:              UnresolvedDeclRefExpr type=<null_type> identifier=a loc=line:6:3
// CHECK:              BinaryExpr type=<null_type> ^= (XOrAssign) opLoc=line:6:10
// CHECK:                UnresolvedDeclRefExpr type=<null_type> identifier=b loc=line:6:8
// CHECK:                BinaryExpr type=<null_type> ??= (NullCoalesceAssign) opLoc=line:6:15
// CHECK:                  UnresolvedDeclRefExpr type=<null_type> identifier=c loc=line:6:13
// CHECK:                  UnresolvedDeclRefExpr type=<null_type> identifier=d loc=line:6:19
// CHECK:            CastExpr type=<null_type> asLoc=line:7:5
// CHECK:              IntegerLiteralExpr type=<null_type> loc=line:7:3 str='0'
// CHECK:              IdentifierTypeRepr loc=line:7:8 identifier=i32
// CHECK:            CastExpr type=<null_type> asLoc=line:8:12
// CHECK:              CastExpr type=<null_type> asLoc=line:8:5
// CHECK:                IntegerLiteralExpr type=<null_type> loc=line:8:3 str='0'
// CHECK:                IdentifierTypeRepr loc=line:8:8 identifier=i32
// CHECK:              IdentifierTypeRepr loc=line:8:15 identifier=i64
// CHECK:            CastExpr type=<null_type> asLoc=line:9:5
// CHECK:              IntegerLiteralExpr type=<null_type> loc=line:9:3 str='0'
// CHECK:              ReferenceTypeRepr mutable ampLoc=line:9:8 mutLoc=line:9:9
// CHECK:                TupleTypeRepr numElements=2 lParenLoc=line:9:13 rParenLoc=line:9:22
// CHECK:                  IdentifierTypeRepr loc=line:9:14 identifier=i32
// CHECK:                  IdentifierTypeRepr loc=line:9:19 identifier=i32
// CHECK:            BinaryExpr type=<null_type> ?? (NullCoalesce) opLoc=line:10:56
// CHECK:              BinaryExpr type=<null_type> || (LOr) opLoc=line:10:52
// CHECK:                BinaryExpr type=<null_type> && (LAnd) opLoc=line:10:48
// CHECK:                  BinaryExpr type=<null_type> >= (GE) opLoc=line:10:44
// CHECK:                    BinaryExpr type=<null_type> > (GT) opLoc=line:10:41
// CHECK:                      BinaryExpr type=<null_type> <= (LE) opLoc=line:10:37
// CHECK:                        BinaryExpr type=<null_type> < (LT) opLoc=line:10:34
// CHECK:                          BinaryExpr type=<null_type> != (NEq) opLoc=line:10:30
// CHECK:                            BinaryExpr type=<null_type> == (Eq) opLoc=line:10:26
// CHECK:                              BinaryExpr type=<null_type> - (Sub) opLoc=line:10:6
// CHECK:                                BinaryExpr type=<null_type> + (Add) opLoc=line:10:4
// CHECK:                                  IntegerLiteralExpr type=<null_type> loc=line:10:3 str='3'
// CHECK:                                  IntegerLiteralExpr type=<null_type> loc=line:10:5 str='2'
// CHECK:                                BinaryExpr type=<null_type> ^ (XOr) opLoc=line:10:24
// CHECK:                                  BinaryExpr type=<null_type> | (Or) opLoc=line:10:22
// CHECK:                                    BinaryExpr type=<null_type> & (And) opLoc=line:10:20
// CHECK:                                      BinaryExpr type=<null_type> >> (Shr) opLoc=line:10:17
// CHECK:                                        BinaryExpr type=<null_type> << (Shl) opLoc=line:10:14
// CHECK:                                          BinaryExpr type=<null_type> % (Rem) opLoc=line:10:12
// CHECK:                                            BinaryExpr type=<null_type> / (Div) opLoc=line:10:10
// CHECK:                                              BinaryExpr type=<null_type> * (Mul) opLoc=line:10:8
// CHECK:                                                IntegerLiteralExpr type=<null_type> loc=line:10:7 str='1'
// CHECK:                                                IntegerLiteralExpr type=<null_type> loc=line:10:9 str='2'
// CHECK:                                              IntegerLiteralExpr type=<null_type> loc=line:10:11 str='3'
// CHECK:                                            IntegerLiteralExpr type=<null_type> loc=line:10:13 str='4'
// CHECK:                                          IntegerLiteralExpr type=<null_type> loc=line:10:16 str='5'
// CHECK:                                        IntegerLiteralExpr type=<null_type> loc=line:10:19 str='6'
// CHECK:                                      IntegerLiteralExpr type=<null_type> loc=line:10:21 str='7'
// CHECK:                                    IntegerLiteralExpr type=<null_type> loc=line:10:23 str='8'
// CHECK:                                  IntegerLiteralExpr type=<null_type> loc=line:10:25 str='9'
// CHECK:                              IntegerLiteralExpr type=<null_type> loc=line:10:28 str='10'
// CHECK:                            IntegerLiteralExpr type=<null_type> loc=line:10:32 str='11'
// CHECK:                          IntegerLiteralExpr type=<null_type> loc=line:10:35 str='12'
// CHECK:                        IntegerLiteralExpr type=<null_type> loc=line:10:39 str='13'
// CHECK:                      IntegerLiteralExpr type=<null_type> loc=line:10:42 str='14'
// CHECK:                    IntegerLiteralExpr type=<null_type> loc=line:10:46 str='15'
// CHECK:                  IntegerLiteralExpr type=<null_type> loc=line:10:50 str='16'
// CHECK:                IntegerLiteralExpr type=<null_type> loc=line:10:54 str='17'
// CHECK:              IntegerLiteralExpr type=<null_type> loc=line:10:58 str='18'
// CHECK:            ConditionalExpr type=<null_type> questionLoc=line:11:5 colonLoc=line:11:9
// CHECK:              IntegerLiteralExpr type=<null_type> loc=line:11:3 str='0'
// CHECK:              IntegerLiteralExpr type=<null_type> loc=line:11:7 str='0'
// CHECK:              IntegerLiteralExpr type=<null_type> loc=line:11:11 str='0'
// CHECK:            ConditionalExpr type=<null_type> questionLoc=line:12:5 colonLoc=line:12:13
// CHECK:              IntegerLiteralExpr type=<null_type> loc=line:12:3 str='0'
// CHECK:              BinaryExpr type=<null_type> = (Assign) opLoc=line:12:9
// CHECK:                UnresolvedDeclRefExpr type=<null_type> identifier=a loc=line:12:7
// CHECK:                UnresolvedDeclRefExpr type=<null_type> identifier=b loc=line:12:11
// CHECK:              IntegerLiteralExpr type=<null_type> loc=line:12:15 str='0'
// CHECK:            ForceUnwrapExpr type=<null_type> exclaimLoc=line:13:6
// CHECK:              UnresolvedDeclRefExpr type=<null_type> identifier=bar loc=line:13:3
// CHECK:            UnresolvedMemberRefExpr type=<null_type> arrow memberIdent=0 memberIdentLoc=line:14:8
// CHECK:              UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:14:3
// CHECK:            UnresolvedMemberRefExpr type=<null_type> arrow memberIdent=bux memberIdentLoc=line:15:14
// CHECK:              UnresolvedMemberRefExpr type=<null_type> dot memberIdent=0 memberIdentLoc=line:15:11
// CHECK:                UnresolvedMemberRefExpr type=<null_type> dot memberIdent=bar memberIdentLoc=line:15:7
// CHECK:                  UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:15:3
// CHECK:            CallExpr type=<null_type> lParenLoc=line:16:6 rParenLoc=line:16:11 numArgs=2
// CHECK:              UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:16:3
// CHECK:              IntegerLiteralExpr type=<null_type> loc=line:16:7 str='1'
// CHECK:              IntegerLiteralExpr type=<null_type> loc=line:16:10 str='2'
// CHECK:            ForceUnwrapExpr type=<null_type> exclaimLoc=line:17:8
// CHECK:              CallExpr type=<null_type> lParenLoc=line:17:6 rParenLoc=line:17:7 numArgs=0
// CHECK:                UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:17:3
// CHECK:            ForceUnwrapExpr type=<null_type> exclaimLoc=line:18:17
// CHECK:              CallExpr type=<null_type> lParenLoc=line:18:15 rParenLoc=line:18:16 numArgs=0
// CHECK:                UnresolvedMemberRefExpr type=<null_type> arrow memberIdent=a memberIdentLoc=line:18:14
// CHECK:                  CallExpr type=<null_type> lParenLoc=line:18:10 rParenLoc=line:18:11 numArgs=0
// CHECK:                    UnresolvedMemberRefExpr type=<null_type> dot memberIdent=0 memberIdentLoc=line:18:9
// CHECK:                      CallExpr type=<null_type> lParenLoc=line:18:6 rParenLoc=line:18:7 numArgs=0
// CHECK:                        UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:18:3
// CHECK:            UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:21:3
// CHECK:            TupleExpr type=<null_type> numElements=0 lParenLoc=line:22:3 rParenLoc=line:22:4
// CHECK:            BinaryExpr type=<null_type> + (Add) opLoc=line:24:6
// CHECK:              UnaryExpr type=<null_type> + (Plus) opLoc=line:24:3
// CHECK:                IntegerLiteralExpr type=<null_type> loc=line:24:4 str='0'
// CHECK:              BinaryExpr type=<null_type> & (And) opLoc=line:24:26
// CHECK:                BinaryExpr type=<null_type> & (And) opLoc=line:24:21
// CHECK:                  BinaryExpr type=<null_type> | (Or) opLoc=line:24:16
// CHECK:                    BinaryExpr type=<null_type> & (And) opLoc=line:24:11
// CHECK:                      UnaryExpr type=<null_type> + (Plus) opLoc=line:24:8
// CHECK:                        IntegerLiteralExpr type=<null_type> loc=line:24:9 str='0'
// CHECK:                      UnaryExpr type=<null_type> - (Minus) opLoc=line:24:13
// CHECK:                        IntegerLiteralExpr type=<null_type> loc=line:24:14 str='0'
// CHECK:                    UnaryExpr type=<null_type> ! (LNot) opLoc=line:24:18
// CHECK:                      IntegerLiteralExpr type=<null_type> loc=line:24:19 str='0'
// CHECK:                  UnaryExpr type=<null_type> ~ (Not) opLoc=line:24:23
// CHECK:                    IntegerLiteralExpr type=<null_type> loc=line:24:24 str='0'
// CHECK:                UnaryExpr type=<null_type> & (AddressOf) opLoc=line:24:28
// CHECK:                  IntegerLiteralExpr type=<null_type> loc=line:24:29 str='0'
// CHECK:            BinaryExpr type=<null_type> = (Assign) opLoc=line:25:5
// CHECK:              DiscardExpr type=<null_type> loc=line:25:3
// CHECK:              BinaryExpr type=<null_type> = (Assign) opLoc=line:25:12
// CHECK:                NullLiteralExpr type=<null_type> loc=line:25:7
// CHECK:                BinaryExpr type=<null_type> = (Assign) opLoc=line:25:16
// CHECK:                  DiscardExpr type=<null_type> loc=line:25:14
// CHECK:                  BinaryExpr type=<null_type> = (Assign) opLoc=line:25:22
// CHECK:                    FloatLiteralExpr type=<null_type> loc=line:25:18 str='0.0'
// CHECK:                    BinaryExpr type=<null_type> = (Assign) opLoc=line:25:26
// CHECK:                      DiscardExpr type=<null_type> loc=line:25:24
// CHECK:                      BinaryExpr type=<null_type> = (Assign) opLoc=line:25:34
// CHECK:                        BooleanLiteralExpr type=<null_type> loc=line:25:28 value=false
// CHECK:                        BooleanLiteralExpr type=<null_type> loc=line:25:36 value=true
// CHECK:            ParenExpr type=<null_type> lParenLoc=line:28:3 rParenLoc=line:28:5
// CHECK:              IntegerLiteralExpr type=<null_type> loc=line:28:4 str='0'
// CHECK:            TupleExpr type=<null_type> numElements=3 lParenLoc=line:30:3 rParenLoc=line:30:11
// CHECK:              IntegerLiteralExpr type=<null_type> loc=line:30:4 str='0'
// CHECK:              IntegerLiteralExpr type=<null_type> loc=line:30:7 str='1'
// CHECK:              IntegerLiteralExpr type=<null_type> loc=line:30:10 str='2'
// CHECK:            TupleExpr type=<null_type> numElements=3 lParenLoc=line:31:3 rParenLoc=line:31:43
// CHECK:              TupleExpr type=<null_type> numElements=3 lParenLoc=line:31:4 rParenLoc=line:31:12
// CHECK:                IntegerLiteralExpr type=<null_type> loc=line:31:5 str='0'
// CHECK:                IntegerLiteralExpr type=<null_type> loc=line:31:8 str='1'
// CHECK:                IntegerLiteralExpr type=<null_type> loc=line:31:11 str='2'
// CHECK:              TupleExpr type=<null_type> numElements=3 lParenLoc=line:31:15 rParenLoc=line:31:23
// CHECK:                IntegerLiteralExpr type=<null_type> loc=line:31:16 str='0'
// CHECK:                IntegerLiteralExpr type=<null_type> loc=line:31:19 str='1'
// CHECK:                IntegerLiteralExpr type=<null_type> loc=line:31:22 str='2'
// CHECK:              TupleExpr type=<null_type> numElements=3 lParenLoc=line:31:26 rParenLoc=line:31:42
// CHECK:                IntegerLiteralExpr type=<null_type> loc=line:31:27 str='0'
// CHECK:                IntegerLiteralExpr type=<null_type> loc=line:31:30 str='1'
// CHECK:                TupleExpr type=<null_type> numElements=3 lParenLoc=line:31:33 rParenLoc=line:31:41
// CHECK:                  IntegerLiteralExpr type=<null_type> loc=line:31:34 str='0'
// CHECK:                  IntegerLiteralExpr type=<null_type> loc=line:31:37 str='1'
// CHECK:                  IntegerLiteralExpr type=<null_type> loc=line:31:40 str='2'
