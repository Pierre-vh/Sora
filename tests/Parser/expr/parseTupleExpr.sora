// RUN: %sorac-parse -verify -dump-parse %s | %filecheck %s

func tuple() {
  // CHECK: TupleExpr type=<null_type> numElements=0 lParenLoc=line:[[@LINE+1]]:3 rParenLoc=line:[[@LINE+1]]:4
  ()
  // CHECK: ParenExpr type=<null_type> lParenLoc=line:[[@LINE+2]]:3 rParenLoc=line:[[@LINE+2]]:5
  // CHECK-NEXT: IntegerLiteralExpr type=<null_type> loc=line:[[@LINE+1]]:4 str='0'
  (0)
  // CHECK: TupleExpr type=<null_type> numElements=2 lParenLoc=line:[[@LINE+3]]:3 rParenLoc=line:[[@LINE+3]]:8
  // CHECK-NEXT: IntegerLiteralExpr type=<null_type> loc=line:[[@LINE+2]]:4 str='0'
  // CHECK-NEXT: IntegerLiteralExpr type=<null_type> loc=line:[[@LINE+1]]:7 str='1'
  (0, 1)
  // CHECK: TupleExpr type=<null_type> numElements=3 lParenLoc=line:[[@LINE+4]]:3 rParenLoc=line:[[@LINE+4]]:11
  // CHECK-NEXT: IntegerLiteralExpr type=<null_type> loc=line:[[@LINE+3]]:4 str='0'
  // CHECK-NEXT: IntegerLiteralExpr type=<null_type> loc=line:[[@LINE+2]]:7 str='1'
  // CHECK-NEXT: IntegerLiteralExpr type=<null_type> loc=line:[[@LINE+1]]:10 str='2'
  (0, 1, 2)
}

func wrongTuple() {
  (   // expect-note: to match this opening '('
  (0, // expect-error: expected an expression after ','
      // expect-error@-1: expected ')' at end of tuple expression
  let a // to recover
  (   // expect-error: expected an expression after '('
  let b // to recover 
  // extra commas
  // CHECK: TupleExpr type=<null_type> numElements=0 lParenLoc=line:[[@LINE+1]]:3 rParenLoc=line:[[@LINE+1]]:5
  (,)     // expect-error: unexpected ',' separator
  // CHECK: TupleExpr type=<null_type> numElements=2 lParenLoc=line:[[@LINE+3]]:3 rParenLoc=line:[[@LINE+3]]:8
  // CHECK-NEXT: IntegerLiteralExpr type=<null_type> loc=line:[[@LINE+2]]:4 str='0'
  // CHECK-NEXT: IntegerLiteralExpr type=<null_type> loc=line:[[@LINE+1]]:7 str='0'
  (0,,0)  // expect-error: unexpected ',' separator
}