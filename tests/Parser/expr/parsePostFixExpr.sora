// RUN: %sorac-parse -verify -dump-parse %s | %filecheck %s

func suffix() {
  // CHECK: UnresolvedMemberRefExpr type=<null_type> dot memberIdent=0 memberIdentLoc=line:[[@LINE+2]]:7
  // CHECK-NEXT: UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:[[@LINE+1]]:3
  foo.0
  // CHECK: UnresolvedMemberRefExpr type=<null_type> dot memberIdent=bar memberIdentLoc=line:[[@LINE+2]]:7
  // CHECK-NEXT: UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:[[@LINE+1]]:3
  foo.bar
  // CHECK: UnresolvedMemberRefExpr type=<null_type> arrow memberIdent=0 memberIdentLoc=line:[[@LINE+2]]:8
  // CHECK-NEXT: UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:[[@LINE+1]]:3
  foo->0
  // CHECK: UnresolvedMemberRefExpr type=<null_type> arrow memberIdent=bar memberIdentLoc=line:[[@LINE+2]]:8
  // CHECK-NEXT: UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:[[@LINE+1]]:3
  foo->bar
  // CHECK: ForceUnwrapExpr type=<null_type> exclaimLoc=line:[[@LINE+2]]:6
  // CHECK-NEXT: UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:[[@LINE+1]]:3
  foo!
  // CHECK: CallExpr type=<null_type> lParenLoc=line:[[@LINE+2]]:6 rParenLoc=line:[[@LINE+2]]:7 numArgs=0
  // CHECK-NEXT: UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:[[@LINE+1]]:3
  foo() 
  // CHECK: CallExpr type=<null_type> lParenLoc=line:[[@LINE+3]]:6 rParenLoc=line:[[@LINE+3]]:8 numArgs=1
  // CHECK-NEXT: UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:[[@LINE+2]]:3
  // CHECK-NEXT: IntegerLiteralExpr type=<null_type> loc=line:[[@LINE+1]]:7 str='0'
  foo(0)
  // CHECK: CallExpr type=<null_type> lParenLoc=line:[[@LINE+4]]:6 rParenLoc=line:[[@LINE+4]]:11 numArgs=2
  // CHECK-NEXT: UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:[[@LINE+3]]:3
  // CHECK-NEXT: IntegerLiteralExpr type=<null_type> loc=line:[[@LINE+2]]:7 str='1'
  // CHECK-NEXT: IntegerLiteralExpr type=<null_type> loc=line:[[@LINE+1]]:10 str='2'
  foo(1, 2)

  // Shouldn't be treated as a call.
  // CHECK-NOT: CallExpr
  // CHECK: UnresolvedDeclRefExpr type=<null_type> identifier=foo loc=line:[[@LINE+1]]:3
  foo 
  // CHECK: TupleExpr type=<null_type> numElements=0 lParenLoc=line:[[@LINE+1]]:3 rParenLoc=line:37:4
  ()

  // Shouldn't be treated as unwrap expr.
  // CHECK-NOT: ForceUnwrapExpr
  // CHECK: IntegerLiteralExpr type=<null_type> loc=line:[[@LINE+1]]:3 str='0'
  0 
  // CHECK: UnaryExpr type=<null_type> ! (LNot) opLoc=line:[[@LINE+2]]:3
  // CHECK-NEXT: IntegerLiteralExpr type=<null_type> loc=line:[[@LINE+1]]:4 str='0'
  !0
}

// test suffix chains
func suffixChain() {
  // CHECK: ForceUnwrapExpr type=<null_type> exclaimLoc=line:[[@LINE+5]]:11
  // CHECK-NEXT: CallExpr type=<null_type> lParenLoc=line:[[@LINE+4]]:9 rParenLoc=line:[[@LINE+4]]:10 numArgs=0
  // CHECK-NEXT:   UnresolvedMemberRefExpr type=<null_type> dot memberIdent=c memberIdentLoc=line:[[@LINE+3]]:8
  // CHECK-NEXT:    UnresolvedMemberRefExpr type=<null_type> arrow memberIdent=b memberIdentLoc=line:[[@LINE+2]]:6
  // CHECK-NEXT:     UnresolvedDeclRefExpr type=<null_type> identifier=a loc=line:[[@LINE+1]]:3
  a->b.c()!
}

func badSuffix() {
  foo-> // expect-error: expected a member name or an index after '->'
  let x // to prevent this from being recognized as foo->foo.
  foo.  // expect-error: expected a member name or an index after '.'
}
