// NOTE: CHECK lines have been generated by utils/update_filecheck_test.py
// RUN: sorac -parse-only -dump-parse %s | FileCheck %s

// @TEST_PATTERN .*Stmt
// @TEST_PATTERN .*Decl(?<!FuncDecl)
// @TEST_PATTERN .*Expr

func stmts() {
  while let (a, b) = (0, 1) {
    while let x = b {
      while true {
        if true {} else if false {} else {}
        return false
        continue
        {break}
      }
      {{if let x = 0 {}}}
    }
    return
  }
  return (a, b)
}

// CHECK:          BlockStmt numElement=2 leftCurlyLoc=line:8:14 rightCurlyLoc=line:22:1
// CHECK-NEXT:       WhileStmt whileLoc=line:9:3
// CHECK-NEXT:         LetDecl letLoc=line:9:9 equalLoc=line:9:20
// CHECK:                    VarDecl type=<null_type> identifier=a identifierLoc=line:9:14 immutable
// CHECK:                    VarDecl type=<null_type> identifier=b identifierLoc=line:9:17 immutable
// CHECK-NEXT:           TupleExpr type=<null_type> numElements=2 lParenLoc=line:9:22 rParenLoc=line:9:27
// CHECK-NEXT:             IntegerLiteralExpr type=<null_type> loc=line:9:23 str='0'
// CHECK-NEXT:             IntegerLiteralExpr type=<null_type> loc=line:9:26 str='1'
// CHECK-NEXT:         BlockStmt numElement=2 leftCurlyLoc=line:9:29 rightCurlyLoc=line:20:3
// CHECK-NEXT:           WhileStmt whileLoc=line:10:5
// CHECK-NEXT:             LetDecl letLoc=line:10:11 equalLoc=line:10:17
// CHECK:                      VarDecl type=<null_type> identifier=x identifierLoc=line:10:15 immutable
// CHECK-NEXT:               UnresolvedDeclRefExpr type=<null_type> identifier=b loc=line:10:19
// CHECK-NEXT:             BlockStmt numElement=2 leftCurlyLoc=line:10:21 rightCurlyLoc=line:18:5
// CHECK-NEXT:               WhileStmt whileLoc=line:11:7
// CHECK-NEXT:                 BooleanLiteralExpr type=<null_type> loc=line:11:13 value=true
// CHECK-NEXT:                 BlockStmt numElement=4 leftCurlyLoc=line:11:18 rightCurlyLoc=line:16:7
// CHECK-NEXT:                   IfStmt ifLoc=line:12:9 elseLoc=line:12:20
// CHECK-NEXT:                     BooleanLiteralExpr type=<null_type> loc=line:12:12 value=true
// CHECK-NEXT:                     BlockStmt numElement=0 leftCurlyLoc=line:12:17 rightCurlyLoc=line:12:18
// CHECK-NEXT:                     IfStmt ifLoc=line:12:25 elseLoc=line:12:37
// CHECK-NEXT:                       BooleanLiteralExpr type=<null_type> loc=line:12:28 value=false
// CHECK-NEXT:                       BlockStmt numElement=0 leftCurlyLoc=line:12:34 rightCurlyLoc=line:12:35
// CHECK-NEXT:                       BlockStmt numElement=0 leftCurlyLoc=line:12:42 rightCurlyLoc=line:12:43
// CHECK-NEXT:                   ReturnStmt loc=line:13:9
// CHECK-NEXT:                     BooleanLiteralExpr type=<null_type> loc=line:13:16 value=false
// CHECK-NEXT:                   ContinueStmt loc=line:14:9
// CHECK-NEXT:                   BlockStmt numElement=1 leftCurlyLoc=line:15:9 rightCurlyLoc=line:15:15
// CHECK-NEXT:                     BreakStmt loc=line:15:10
// CHECK-NEXT:               BlockStmt numElement=1 leftCurlyLoc=line:17:7 rightCurlyLoc=line:17:25
// CHECK-NEXT:                 BlockStmt numElement=1 leftCurlyLoc=line:17:8 rightCurlyLoc=line:17:24
// CHECK-NEXT:                   IfStmt ifLoc=line:17:9
// CHECK-NEXT:                     LetDecl letLoc=line:17:12 equalLoc=line:17:18
// CHECK:                              VarDecl type=<null_type> identifier=x identifierLoc=line:17:16 immutable
// CHECK-NEXT:                       IntegerLiteralExpr type=<null_type> loc=line:17:20 str='0'
// CHECK-NEXT:                     BlockStmt numElement=0 leftCurlyLoc=line:17:22 rightCurlyLoc=line:17:23
// CHECK-NEXT:           ReturnStmt loc=line:19:5
// CHECK-NEXT:       ReturnStmt loc=line:21:3
// CHECK-NEXT:         TupleExpr type=<null_type> numElements=2 lParenLoc=line:21:10 rParenLoc=line:21:15
// CHECK-NEXT:           UnresolvedDeclRefExpr type=<null_type> identifier=a loc=line:21:11
// CHECK-NEXT:           UnresolvedDeclRefExpr type=<null_type> identifier=b loc=line:21:14
