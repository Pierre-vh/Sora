// RUN: sorac -sema-only -verify %s

func foo( // expect-note: previous definition of 'foo' is here
  a: i32, // expect-note: identifier 'a' is bound for the first time here
  b: i32, // expect-note: identifier 'b' is bound for the first time here
  a: i32, // expect-error: identifier 'a' is bound multiple times in the same parameter list
  b: i32  // expect-error: identifier 'b' is bound multiple times in the same parameter list
) {}

func foo() { // expect-error: value 'foo' is already defined in this scope
    let ((a, a, a), b, b) = ((0, 0, 0), 0, 0) 
                          // expect-2-error@-1: identifier 'a' is bound multiple times in the same pattern
                          // expect-note@-2: identifier 'a' is bound for the first time here
                          // expect-error@-3: identifier 'b' is bound multiple times in the same pattern
                          // expect-note@-4: identifier 'b' is bound for the first time here
    func foo() {}
    {
        let a = 0             // expect-note: previous definition of 'a' is here
        let (a, a) = (0, 1)   // expect-error: identifier 'a' is bound multiple times in the same pattern
                    // expect-note@-1: identifier 'a' is bound for the first time here
                    // expect-error@-2: value 'a' is already defined in this scope
        func foo() {}
        {
            func foo() {}
        }
    }
    
    let x: maybe i32
    if let x = x {}
}

func bar(bar: i32) {} // this is allowed, but not really useful. 

func boo() {
  let a = 0   // expect-note: previous definition of 'a' is here
  let b = 0
  let a = 0   // expect-error: value 'a' is already defined in this scope
}
