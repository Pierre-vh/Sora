// RUN: sorac -sema-only -verify %s

func test() {
    let x: maybe i32 = 0
    if let x = x {
      x // has type i32
    }
    if let x = 0 { // expect-error: initializer for conditional binding must have a maybe type, not 'i32'
      x
    }
    if let x: i64 = 0 { // expect-error: initializer for conditional binding must have a maybe type, not 'i64'
      x
    }
    let y: maybe maybe void = ()
    if let y = y {
      if let y = y {
        let () = y
      }
    }
    let z: maybe i32 = 0
    if let (x, y) = (z, z) { // expect-error: initializer for conditional binding must have a maybe type, not '(maybe i32, maybe i32)'
    
    }

   if let x = null {}    // expect-error: 'null' requires a contextual type
   while let x = null {} // expect-error: 'null' requires a contextual type

   if let x {}           // expect-error: variable binding in a condition requires an initializer
   while let x {}        // expect-error: variable binding in a condition requires an initializer
}
