// RUN: sorac -sema-only -verify %s

func cond() {
  let x = 0
  let y = 0

  // correct
  if x == 0 {}
  while x == 0 {}
  if x == 0 && true{}
  while x == 0 && true {}
  if x == 0 || false {}
  while x == 0 || false {}

  // incorrect
  if x {}                         // expect-error: value of non-boolean type 'i32' used as a condition
  while x {}                      // expect-error: value of non-boolean type 'i32' used as a condition
  if null {}                      // expect-error: value of non-boolean type 'maybe _' used as a condition
                                  // expect-error@-1: 'null' requires a contextual type
  while (x == 0, y == 0) {}       // expect-error: value of non-boolean type '(bool, bool)' used as a condition
  if (x == 0, y == 0) {}          // expect-error: value of non-boolean type '(bool, bool)' used as a condition
  if cond {}                      // expect-error: value of non-boolean type '() -> void' used as a condition
  if cond() {}                    // expect-error: value of non-boolean type 'void' used as a condition
  if () {}                        // expect-error: value of non-boolean type '()' used as a condition
  if foo {}                       // expect-error: cannot find value 'foo' in this scope
}
