// RUN: sorac -sema-only -verify %s

func coalesce(x: maybe i32, y: maybe &i32, z: maybe &mut i32) {
  let mut a = 0
  let b = 0
  y ?? &a
  y ?? &b
  z ?? &a  
  z ?? &b   // expect-error: cannot use binary operator '??' on operands of type 'maybe &mut i32' and '&i32'
  y ?? 0    // expect-error: cannot use binary operator '??' on operands of type 'maybe &i32' and 'i32'
  x ?? x    // expect-error: cannot use binary operator '??' on operands of type 'maybe i32' and 'maybe i32'
  x ?? 0
  0 ?? 0  // expect-error: cannot use binary operator '??' on operands of type 'i32' and 'i32'
  x ?? () // expect-error: cannot use binary operator '??' on operands of type 'maybe i32' and '()'
}

func eq(x: &i32, y: &mut i32) {
  let (mut a, b) = (0, 1)
  a == b

  a == x    // expect-error: cannot use binary operator '==' on operands of type 'i32' and '&i32'
  x == a    // expect-error: cannot use binary operator '==' on operands of type '&i32' and 'i32'

  (a, x) == (b, y)
  (a, x, b, y) == (b, y, a, x)

  x == x
  y == y

  x == y
  y == x

  func foo() {}
  func bar() {}

  foo == bar  // expect-error: cannot use binary operator '==' on operands of type '() -> void' and '() -> void'
}

func binOp() {
  let vBool = true

  let vF32: f32 = 0.0
  let vF64: f64 = 0.0

  let vI8: i8 = 0
  let vI16: i16 = 0
  let vI32: i32 = 0
  let vI64: i64 = 0
  let vISIZE: isize = 0
  let vU8: u8 = 0
  let vU16: u16 = 0
  let vU32: u32 = 0
  let vU64: u64 = 0
  let vUSIZE: usize = 0

  vF32 + vF32
  vF32 - vF32
  vF32 * vF32
  vF32 / vF32
  vF32 < vF32
  vF32 > vF32
  vF32 >= vF32
  vF32 <= vF32
  vF32 % vF32   // expect-error: cannot use binary operator '%' on operands of type 'f32' and 'f32'
  vF32 << vF32  // expect-error: cannot use binary operator '<<' on operands of type 'f32' and 'f32'
  vF32 >> vF32  // expect-error: cannot use binary operator '>>' on operands of type 'f32' and 'f32'
  vF32 | vF32   // expect-error: cannot use binary operator '|' on operands of type 'f32' and 'f32'
  vF32 & vF32   // expect-error: cannot use binary operator '&' on operands of type 'f32' and 'f32'
  vF32 ^ vF32   // expect-error: cannot use binary operator '^' on operands of type 'f32' and 'f32'

  vF64 + vF64
  vF64 - vF64
  vF64 * vF64
  vF64 / vF64
  vF64 < vF64
  vF64 > vF64
  vF64 >= vF64
  vF64 <= vF64
  vF64 % vF64   // expect-error: cannot use binary operator '%' on operands of type 'f64' and 'f64'
  vF64 << vF64  // expect-error: cannot use binary operator '<<' on operands of type 'f64' and 'f64'
  vF64 >> vF64  // expect-error: cannot use binary operator '>>' on operands of type 'f64' and 'f64'
  vF64 | vF64   // expect-error: cannot use binary operator '|' on operands of type 'f64' and 'f64'
  vF64 & vF64   // expect-error: cannot use binary operator '&' on operands of type 'f64' and 'f64'
  vF64 ^ vF64   // expect-error: cannot use binary operator '^' on operands of type 'f64' and 'f64'

  vI8 + vI8
  vI8 - vI8
  vI8 * vI8
  vI8 / vI8
  vI8 < vI8
  vI8 > vI8
  vI8 >= vI8
  vI8 <= vI8
  vI8 % vI8
  vI8 << vI8
  vI8 >> vI8
  vI8 | vI8
  vI8 & vI8
  vI8 ^ vI8

  vI16 + vI16
  vI16 - vI16
  vI16 * vI16
  vI16 / vI16
  vI16 < vI16
  vI16 > vI16
  vI16 >= vI16
  vI16 <= vI16
  vI16 % vI16
  vI16 << vI16
  vI16 >> vI16
  vI16 | vI16
  vI16 & vI16
  vI16 ^ vI16

  vI32 + vI32
  vI32 - vI32
  vI32 * vI32
  vI32 / vI32
  vI32 < vI32
  vI32 > vI32
  vI32 >= vI32
  vI32 <= vI32
  vI32 % vI32
  vI32 << vI32
  vI32 >> vI32
  vI32 | vI32
  vI32 & vI32
  vI32 ^ vI32

  vI64 + vI64
  vI64 - vI64
  vI64 * vI64
  vI64 / vI64
  vI64 < vI64
  vI64 > vI64
  vI64 >= vI64
  vI64 <= vI64
  vI64 % vI64
  vI64 << vI64
  vI64 >> vI64
  vI64 | vI64
  vI64 & vI64
  vI64 ^ vI64

  vISIZE + vISIZE
  vISIZE - vISIZE
  vISIZE * vISIZE
  vISIZE / vISIZE
  vISIZE < vISIZE
  vISIZE > vISIZE
  vISIZE >= vISIZE
  vISIZE <= vISIZE
  vISIZE % vISIZE
  vISIZE << vISIZE
  vISIZE >> vISIZE
  vISIZE | vISIZE
  vISIZE & vISIZE
  vISIZE ^ vISIZE

  vU8 + vU8
  vU8 - vU8
  vU8 * vU8
  vU8 / vU8
  vU8 < vU8
  vU8 > vU8
  vU8 >= vU8
  vU8 <= vU8
  vU8 % vU8
  vU8 << vU8
  vU8 >> vU8
  vU8 | vU8
  vU8 & vU8
  vU8 ^ vU8

  vU16 + vU16
  vU16 - vU16
  vU16 * vU16
  vU16 / vU16
  vU16 < vU16
  vU16 > vU16
  vU16 >= vU16
  vU16 <= vU16
  vU16 % vU16
  vU16 << vU16
  vU16 >> vU16
  vU16 | vU16
  vU16 & vU16
  vU16 ^ vU16

  vU32 + vU32
  vU32 - vU32
  vU32 * vU32
  vU32 / vU32
  vU32 < vU32
  vU32 > vU32
  vU32 > vU32
  vU32 >= vU32
  vU32 <= vU32
  vU32 % vU32
  vU32 << vU32
  vU32 >> vU32
  vU32 | vU32
  vU32 & vU32
  vU32 ^ vU32

  vU64 + vU64
  vU64 - vU64
  vU64 * vU64
  vU64 / vU64
  vU64 < vU64
  vU64 > vU64
  vU64 >= vU64
  vU64 <= vU64
  vU64 % vU64
  vU64 << vU64
  vU64 >> vU64
  vU64 | vU64
  vU64 & vU64
  vU64 ^ vU64

  vUSIZE + vUSIZE
  vUSIZE - vUSIZE
  vUSIZE * vUSIZE
  vUSIZE / vUSIZE
  vUSIZE < vUSIZE
  vUSIZE > vUSIZE
  vUSIZE >= vUSIZE
  vUSIZE <= vUSIZE
  vUSIZE % vUSIZE
  vUSIZE << vUSIZE
  vUSIZE >> vUSIZE
  vUSIZE | vUSIZE
  vUSIZE & vUSIZE
  vUSIZE ^ vUSIZE

  vBool && vBool
  vBool || vBool
  (vI8 < vI8) && (vI8 > vI8) || (vI8 == vI8)

  vI8 << vI64
  vI64 << vI8
  vU8 >> vI8
  vU64 << vU8
  vUSIZE >> vISIZE

  vI8 && vI8        // expect-error: cannot use binary operator '&&' on operands of type 'i8' and 'i8'
  vI8 || vI8        // expect-error: cannot use binary operator '||' on operands of type 'i8' and 'i8'
  vI8 + vU8         // expect-error: cannot use binary operator '+' on operands of type 'i8' and 'u8'
  vI8 + vI16        // expect-error: cannot use binary operator '+' on operands of type 'i8' and 'i16'
  vI8 + vF32        // expect-error: cannot use binary operator '+' on operands of type 'i8' and 'f32'
  null < ()         // expect-error: cannot use binary operator '<' on operands of type 'null' and '()'
  null + null       // expect-error: cannot use binary operator '+' on operands of type 'null' and 'null'
  true + false      // expect-error: cannot use binary operator '+' on operands of type 'bool' and 'bool'
  () % ()           // expect-error: cannot use binary operator '%' on operands of type '()' and '()'
}

func assign(p1: i32) {
    // Basic assignement tests
    null = 0            // expect-error: cannot assign to a literal value
    true = true         // expect-error: cannot assign to a literal value
    (0, 1) = (0, 1)     // expect-error: cannot assign to immutable expression of type '(i32, i32)'
    p1 = 0              // expect-error: cannot assign to immutable value 'p1'    
    let immut: i32  
    immut = 0           // expect-error: cannot assign to immutable value 'immut'
    assign = assign     // expect-error: cannot assign to immutable value 'assign'

    let (mut a, b) = (0, 1)
    a = 0
    b = 0               // expect-error: cannot assign to immutable value 'b'
    a = false           // expect-error: cannot assign value of type 'bool' to type 'i32'
    b = false           // expect-error: cannot assign to immutable value 'b'

    // Implicit conversions
    let mut m1: maybe i32
    let mut m2: maybe maybe i32
    m1 = 0
    m2 = 0
    m2 = m1 
    (m1, m2) = (0, 0)

    let mut ref: &i32
    ref = &a
    ref = &b
    ref = &m1           // expect-error: cannot assign value of type '&mut maybe i32' to type '&i32'

    let mut emptyTuple = ()
    let mut voidVal: void 
    voidVal = emptyTuple
    emptyTuple = voidVal

    let maybeVI32: maybe i32
    let maybeMaybeVI32: maybe maybe i32
    let maybeVI8: maybe i8
    let maybeMaybeVI8: maybe maybe i8

    maybeVI32 ?? 0
    maybeMaybeVI32 ?? 0
    maybeVI8 ?? 0
    maybeMaybeVI8 ?? 0

    maybeVI32 ?? true          // expect-error: cannot use binary operator '??' on operands of type 'maybe i32' and 'bool'
    maybeMaybeVI8 ?? 0 as i32  // expect-error: cannot use binary operator '??' on operands of type 'maybe maybe i8' and 'i32'
}

func compoundAssign() {
  let mut vBool = true

  let mut vF32: f32 = 0.0
  let mut vF64: f64 = 0.0

  let mut vI8: i8 = 0
  let mut vI16: i16 = 0
  let mut vI32: i32 = 0
  let mut vI64: i64 = 0
  let mut vISIZE: isize = 0
  let mut vU8: u8 = 0
  let mut vU16: u16 = 0
  let mut vU32: u32 = 0
  let mut vU64: u64 = 0
  let mut vUSIZE: usize = 0

  vBool += vBool    // expect-error: cannot use binary operator '+=' on operands of type 'bool' and 'bool'
  vBool -= vBool    // expect-error: cannot use binary operator '-=' on operands of type 'bool' and 'bool'    
  vBool *= vBool    // expect-error: cannot use binary operator '*=' on operands of type 'bool' and 'bool'    
  vBool /= vBool    // expect-error: cannot use binary operator '/=' on operands of type 'bool' and 'bool'
  vBool %= vBool    // expect-error: cannot use binary operator '%=' on operands of type 'bool' and 'bool'
  vBool <<= vBool   // expect-error: cannot use binary operator '<<=' on operands of type 'bool' and 'bool'
  vBool >>= vBool   // expect-error: cannot use binary operator '>>=' on operands of type 'bool' and 'bool'
  vBool &= vBool    // expect-error: cannot use binary operator '&=' on operands of type 'bool' and 'bool'
  vBool |= vBool    // expect-error: cannot use binary operator '|=' on operands of type 'bool' and 'bool'
  vBool ^= vBool    // expect-error: cannot use binary operator '^=' on operands of type 'bool' and 'bool'
  vBool ??= vBool   // expect-error: cannot use binary operator '??=' on operands of type 'bool' and 'bool'

  vF32 += vF32
  vF32 -= vF32
  vF32 *= vF32
  vF32 /= vF32
  vF32 %= vF32  // expect-error: cannot use binary operator '%=' on operands of type 'f32' and 'f32'
  vF32 <<= vF32 // expect-error: cannot use binary operator '<<=' on operands of type 'f32' and 'f32'
  vF32 >>= vF32 // expect-error: cannot use binary operator '>>=' on operands of type 'f32' and 'f32'
  vF32 &= vF32  // expect-error: cannot use binary operator '&=' on operands of type 'f32' and 'f32'
  vF32 |= vF32  // expect-error: cannot use binary operator '|=' on operands of type 'f32' and 'f32'
  vF32 ^= vF32  // expect-error: cannot use binary operator '^=' on operands of type 'f32' and 'f32'
  vF32 ??= vF32 // expect-error: cannot use binary operator '??=' on operands of type 'f32' and 'f32'   

  
  vF64 += vF64
  vF64 -= vF64
  vF64 *= vF64
  vF64 /= vF64
  vF64 %= vF64  // expect-error: cannot use binary operator '%=' on operands of type 'f64' and 'f64'
  vF64 <<= vF64 // expect-error: cannot use binary operator '<<=' on operands of type 'f64' and 'f64'
  vF64 >>= vF64 // expect-error: cannot use binary operator '>>=' on operands of type 'f64' and 'f64'
  vF64 &= vF64  // expect-error: cannot use binary operator '&=' on operands of type 'f64' and 'f64'
  vF64 |= vF64  // expect-error: cannot use binary operator '|=' on operands of type 'f64' and 'f64'
  vF64 ^= vF64  // expect-error: cannot use binary operator '^=' on operands of type 'f64' and 'f64'
  vF64 ??= vF64 // expect-error: cannot use binary operator '??=' on operands of type 'f64' and 'f64'
  
  vI8 += vI8
  vI8 -= vI8
  vI8 *= vI8
  vI8 /= vI8
  vI8 %= vI8 
  vI8 <<= vI8
  vI8 >>= vI8
  vI8 &= vI8 
  vI8 |= vI8 
  vI8 ^= vI8 
  vI8 ??= vI8     // expect-error: cannot use binary operator '??=' on operands of type 'i8' and 'i8'
  
  vI16 += vI16
  vI16 -= vI16
  vI16 *= vI16
  vI16 /= vI16
  vI16 %= vI16 
  vI16 <<= vI16
  vI16 >>= vI16
  vI16 &= vI16 
  vI16 |= vI16 
  vI16 ^= vI16 
  vI16 ??= vI16   // expect-error: cannot use binary operator '??=' on operands of type 'i16' and 'i16'
  
  vI32 += vI32
  vI32 -= vI32
  vI32 *= vI32
  vI32 /= vI32
  vI32 %= vI32 
  vI32 <<= vI32
  vI32 >>= vI32
  vI32 &= vI32 
  vI32 |= vI32 
  vI32 ^= vI32 
  vI32 ??= vI32   // expect-error: cannot use binary operator '??=' on operands of type 'i32' and 'i32'
  
  vI64 += vI64
  vI64 -= vI64
  vI64 *= vI64
  vI64 /= vI64
  vI64 %= vI64 
  vI64 <<= vI64
  vI64 >>= vI64
  vI64 &= vI64 
  vI64 |= vI64 
  vI64 ^= vI64 
  vI64 ??= vI64   // expect-error: cannot use binary operator '??=' on operands of type 'i64' and 'i64'
  
  vISIZE += vISIZE
  vISIZE -= vISIZE
  vISIZE *= vISIZE
  vISIZE /= vISIZE
  vISIZE %= vISIZE 
  vISIZE <<= vISIZE
  vISIZE >>= vISIZE
  vISIZE &= vISIZE 
  vISIZE |= vISIZE 
  vISIZE ^= vISIZE 
  vISIZE ??= vISIZE   // expect-error: cannot use binary operator '??=' on operands of type 'isize' and 'isize'
  
  vU8 += vU8
  vU8 -= vU8
  vU8 *= vU8
  vU8 /= vU8
  vU8 %= vU8 
  vU8 <<= vU8
  vU8 >>= vU8
  vU8 &= vU8 
  vU8 |= vU8 
  vU8 ^= vU8 
  vU8 ??= vU8   // expect-error: cannot use binary operator '??=' on operands of type 'u8' and 'u8'
  
  vU16 += vU16
  vU16 -= vU16
  vU16 *= vU16
  vU16 /= vU16
  vU16 %= vU16 
  vU16 <<= vU16
  vU16 >>= vU16
  vU16 &= vU16 
  vU16 |= vU16 
  vU16 ^= vU16 
  vU16 ??= vU16   // expect-error: cannot use binary operator '??=' on operands of type 'u16' and 'u16'
  
  vU32 += vU32
  vU32 -= vU32
  vU32 *= vU32
  vU32 /= vU32
  vU32 %= vU32 
  vU32 <<= vU32
  vU32 >>= vU32
  vU32 &= vU32 
  vU32 |= vU32 
  vU32 ^= vU32 
  vU32 ??= vU32   // expect-error: cannot use binary operator '??=' on operands of type 'u32' and 'u32'
  
  vU64 += vU64
  vU64 -= vU64
  vU64 *= vU64
  vU64 /= vU64
  vU64 %= vU64 
  vU64 <<= vU64
  vU64 >>= vU64
  vU64 &= vU64 
  vU64 |= vU64 
  vU64 ^= vU64 
  vU64 ??= vU64   // expect-error: cannot use binary operator '??=' on operands of type 'u64' and 'u64'
  
  vUSIZE += vUSIZE
  vUSIZE -= vUSIZE
  vUSIZE *= vUSIZE
  vUSIZE /= vUSIZE
  vUSIZE %= vUSIZE 
  vUSIZE <<= vUSIZE
  vUSIZE >>= vUSIZE
  vUSIZE &= vUSIZE 
  vUSIZE |= vUSIZE 
  vUSIZE ^= vUSIZE 
  vUSIZE ??= vUSIZE   // expect-error: cannot use binary operator '??=' on operands of type 'usize' and 'usize'

  vUSIZE <<= vI8
  vI8 >>= vUSIZE
  vI8 <<= vI16
  vI16 <<= vU64
  vI64 >>= vI8

  let mut maybeVI32: maybe i32
  let mut maybeMaybeVI32: maybe maybe i32
  let mut maybeVI8: maybe i8
  let mut maybeMaybeVI8: maybe maybe i8

  maybeVI32 ??= 0
  maybeMaybeVI32 ??= 0
  maybeVI8 ??= 0
  maybeMaybeVI8 ??= 0

  maybeVI32 ??= true          // expect-error: cannot use binary operator '??=' on operands of type 'maybe i32' and 'bool'
  maybeMaybeVI8 ??= 0 as i32  // expect-error: cannot use binary operator '??=' on operands of type 'maybe maybe i8' and 'i32'
}


func nullOps() {
  null + null  // expect-error: cannot use binary operator '+' on operands of type 'null' and 'null'
  null + 0     // expect-error: cannot use binary operator '+' on operands of type 'null' and 'i32'
  0 + null     // expect-error: cannot use binary operator '+' on operands of type 'i32' and 'null'
  0.0 + null   // expect-error: cannot use binary operator '+' on operands of type 'f32' and 'null'
  null + 0.0   // expect-error: cannot use binary operator '+' on operands of type 'null' and 'f32'
}
