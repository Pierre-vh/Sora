// RUN: %sorac-typecheck -verify -dump-ast %s | %filecheck %s

func plusAndMinus(x: i8) {
  let mut y: u8 = 0
  // CHECK: UnaryExpr type=i32 + (Plus) opLoc=line:6:3
  +0
  // CHECK: UnaryExpr type=i32 - (Minus) opLoc=line:8:3
  -0
  // CHECK: UnaryExpr type=f32 + (Plus) opLoc=line:10:3
  +1.1
  // CHECK: UnaryExpr type=f32 - (Minus) opLoc=line:12:3
  -1.2
  // CHECK: UnaryExpr type=i8 + (Plus) opLoc=line:14:3
  +x
  // CHECK: UnaryExpr type=i8 - (Minus) opLoc=line:16:3
  -x
  // CHECK: UnaryExpr type=u8 + (Plus) opLoc=line:18:3
  +y
  // CHECK: UnaryExpr type=u8 - (Minus) opLoc=line:20:3
  -y
  // CHECK: UnaryExpr type=i32 + (Plus) opLoc=line:22:3
  +(0)
  // CHECK: UnaryExpr type=i32 + (Plus) opLoc=line:24:3
  +((0))
  // CHECK: UnaryExpr type=i32 + (Plus) opLoc=line:26:3
  +(((0)))
  // CHECK: UnaryExpr type=i8 + (Plus) opLoc=line:28:3
  +(x)
  // CHECK: UnaryExpr type=i8 + (Plus) opLoc=line:30:3
  +((x))
  // CHECK: UnaryExpr type=i8 + (Plus) opLoc=line:32:3
  +(((x)))
  // CHECK: UnaryExpr type=u8 + (Plus) opLoc=line:34:3
  +(y)
  // CHECK: UnaryExpr type=u8 + (Plus) opLoc=line:36:3
  +((y))
  // CHECK: UnaryExpr type=u8 + (Plus) opLoc=line:38:3
  +(((y)))

  // CHECK: IntegerLiteralExpr type=i8 loc=line:41:16
  let _: i8 = -0
  // CHECK: IntegerLiteralExpr type=usize loc=line:43:24
  let _: usize = -(+(-(0)))
}

func dereference() {
  let a: &i32
  let mut b: &i32
  let c: &mut i32
  let mut d: &mut i32

  // CHECK: UnaryExpr type=i32 * (Deref) opLoc=line:53:3
  *a
  // CHECK: UnaryExpr type=i32 * (Deref) opLoc=line:55:3
  *b 
  // CHECK: UnaryExpr type=@lvalue i32 * (Deref) opLoc=line:57:3
  *c
  // CHECK: UnaryExpr type=@lvalue i32 * (Deref) opLoc=line:59:3
  *d
}


func addressOf(x: i32) {
  let mut y = 0
  let tuple = (0, 1)
  let mut mutTuple = (0, 1)
  // CHECK: UnaryExpr type=&i32 & (AddressOf) opLoc=line:68:3
  &x
  // CHECK: UnaryExpr type=&mut i32 & (AddressOf) opLoc=line:70:3
  &y
  // CHECK: UnaryExpr type=&(i32, i32) & (AddressOf) opLoc=line:72:3
  &tuple
  // CHECK: UnaryExpr type=&mut (i32, i32) & (AddressOf) opLoc=line:74:3
  &mutTuple
  // CHECK: UnaryExpr type=&i32 & (AddressOf) opLoc=line:76:3
  &tuple.0
  // CHECK: UnaryExpr type=&mut i32 & (AddressOf) opLoc=line:78:3
  &mutTuple.0

  &0              // expect-error: cannot take the address of a literal
  &null           // expect-error: cannot take the address of a literal
  &true           // expect-error: cannot take the address of a literal
  &0.0            // expect-error: cannot take the address of a literal
  &(x, y)         // expect-error: cannot take the address of a temporary tuple or of one of its elements
  &(x, y).0       // expect-error: cannot take the address of a temporary tuple or of one of its elements
  &(((x, y)).0)   // expect-error: cannot take the address of a temporary tuple or of one of its elements
  &+x             // expect-error: cannot take the address of a temporary value or of one of its members
  &++x            // expect-error: cannot take the address of a temporary value or of one of its members
}

func lNot(x: bool) {
  // CHECK: UnaryExpr type=bool ! (LNot) opLoc=line:93:3
  !x
  // CHECK: UnaryExpr type=bool ! (LNot) opLoc=line:95:3
  !false
  // CHECK: UnaryExpr type=bool ! (LNot) opLoc=line:97:3
  !true

  !0              // expect-error: cannot use unary operator '!' on operand of type 'i32'
  !0.0            // expect-error: cannot use unary operator '!' on operand of type 'f32'
  !null           // expect-error: cannot use unary operator '!' on operand of type 'null'
  !(0, 1)         // expect-error: cannot use unary operator '!' on operand of type '(i32, i32)'
}

func not() {
  let a = 0
  let mut b = 0

  // CHECK: UnaryExpr type=i32 ~ (Not) opLoc=line:110:3
  ~a
  // CHECK: UnaryExpr type=i32 ~ (Not) opLoc=line:112:3
  ~b

  // CHECK: IntegerLiteralExpr type=i8 loc=line:115:16
  let _: i8 = ~0
  // CHECK: IntegerLiteralExpr type=u8 loc=line:117:18
  let _: u8 = ~(~0)

  ~0.0       // expect-error: cannot use unary operator '~' on operand of type 'f32'
  ~false     // expect-error: cannot use unary operator '~' on operand of type 'bool'
  ~true      // expect-error: cannot use unary operator '~' on operand of type 'bool'
  ~null      // expect-error: cannot use unary operator '~' on operand of type 'null'
  ~(0, 1)    // expect-error: cannot use unary operator '~' on operand of type '(i32, i32)'
}

func onErr() {
  +err      // expect-error: cannot find value 'err' in this scope
}