// RUN: sorac -sema-only -verify %s

func plusAndMinus(x: i8) {
  let mut y: u8 = 0
  +0
  -0
  +1.1
  -1.2
  +x
  -x
  +y
  -y
  +(0)
  +((0))
  +(((0)))
  +(x)
  +((x))
  +(((x)))
  +(y)
  +((y))

  let _: i8 = -0
  let _: usize = -(+(-(0)))
}

func dereference() {
  let a: &i32
  let mut b: &i32
  let c: &mut i32
  let mut d: &mut i32
  *a
  *b 
  *c
  *d
}

func createTempVal() -> i32 { return 0 }

func addressOf(x: i32) {
  let mut y = 0
  let tuple = (0, 1)
  let mut mutTuple = (0, 1)

  &x
  &y

  &tuple
  &mutTuple
  &tuple.0
  &mutTuple.0

  &0              // expect-error: cannot take the address of a literal
  &null           // expect-error: cannot take the address of a literal
  &true           // expect-error: cannot take the address of a literal
  &0.0            // expect-error: cannot take the address of a literal
  &(x, y)         // expect-error: cannot take the address of a temporary value
  &(x, y).0
  &(((x, y)).0)
  &+x              // expect-error: cannot take the address of a temporary value
  &+(+x)           // expect-error: cannot take the address of a temporary value
  &createTempVal() // expect-error: cannot take the address of a temporary value
}

func lNot(x: bool) {
  !x
  !false
  !true

  !0              // expect-error: cannot use unary operator '!' on operand of type 'i32'
  !0.0            // expect-error: cannot use unary operator '!' on operand of type 'f32'
  !null           // expect-error: cannot use unary operator '!' on operand of type 'maybe _'
  !(0, 1)         // expect-error: cannot use unary operator '!' on operand of type '(i32, i32)'
}

func not() {
  let a = 0
  let mut b = 0

  ~a
  ~b

  let _: i8 = ~0
  let _: u8 = ~(~0)

  ~0.0       // expect-error: cannot use unary operator '~' on operand of type 'f32'
  ~false     // expect-error: cannot use unary operator '~' on operand of type 'bool'
  ~true      // expect-error: cannot use unary operator '~' on operand of type 'bool'
  ~null      // expect-error: cannot use unary operator '~' on operand of type 'maybe _'
  ~(0, 1)    // expect-error: cannot use unary operator '~' on operand of type '(i32, i32)'
}

func onErr() {
  +err      // expect-error: cannot find value 'err' in this scope
}
