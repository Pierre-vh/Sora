// RUN: sorac -sema-only -verify %s

func intCast() {
  let mut a: i32 = 0
  a as u16
  a as i32
  0 as u16

  // Cannot cast through references
  let refI8: &i8
  refI8 as &i16                   // expect-error: cannot cast value of type '&i8' to '&i16'
  (refI8, refI8) as (&i16, &i16)  // expect-error: cannot cast value of type '(&i8, &i8)' to '(&i16, &i16)'

  // Can cast through maybe types
  let maybeI8: maybe i8 = 0
  (maybeI8, maybeI8) as (maybe i16, maybe i16)
}

func floatCast() {
  let mut a: f32 = 0.0
  let x = 0
  a as f32
  a as f64
  x as f32
  x as f64
}

func boolCast() {
  0 as bool
  true as usize
}

func implCast(a: &mut i8, b: &i8) {
  a as &i8
  a as &mut i8     
  b as &i8
  b as &mut i8        // expect-error: cannot cast value of type '&i8' to '&mut i8'
  a as maybe &i8
  a as maybe &mut i8 
  b as maybe &i8
  b as maybe &mut i8  // expect-error: cannot cast value of type '&i8' to 'maybe &mut i8'
}
