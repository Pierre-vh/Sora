// RUN: %sorac-typecheck -verify -dump-ast %s | %filecheck %s

func intCast() {
  let mut a: i32
  // CHECK: CastExpr type=u16 asLoc=line:6:5
  a as u16
  // CHECK: CastExpr type=i32 asLoc=line:8:5 useless
  a as i32
  // CHECK: CastExpr type=u16 asLoc=line:10:5 useless
  0 as u16

  // Cannot cast through references
  let refI8: &i8
  refI8 as &i16                   // expect-error: cannot cast value of type '&i8' to '&i16'
  (refI8, refI8) as (&i16, &i16)  // expect-error: cannot cast value of type '(&i8, &i8)' to '(&i16, &i16)'

  // Can cast through maybe types
  let maybeI8: maybe i8 = 0
  (maybeI8, maybeI8) as (maybe i16, maybe i16)
}

// Test that those conversion work with added implicit casts
func implCast(a: &mut i8, b: &i8) {
  a as &i8
  a as &mut i8     
  b as &i8
  b as &mut i8        // expect-error: cannot cast value of type '&i8' to '&mut i8'
  a as maybe &i8
  a as maybe &mut i8 
  b as maybe &i8
  b as maybe &mut i8  // expect-error: cannot cast value of type '&i8' to 'maybe &mut i8'
}